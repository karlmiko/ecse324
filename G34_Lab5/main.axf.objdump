
//campus.mcgill.ca/emf/CPE/kkoeri/Desktop/G34_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	dc 0f 00 00 e8 0f 00 00 f4 0f 00 00 00 10 00 00     ................
      30:	0c 10 00 00 bc 24 00 00 84 0e 00 00 18 10 00 00     .....$..........

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x90>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x8c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x94>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x44>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x7c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x6c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0x1c>
      d4:	eb0008df 	bl	2458 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000025a4 	.word	0x000025a4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031808 	.word	0x00031808

00000124 <__cs3_heap_start_ptr>:
     124:	00031858 	.word	0x00031858

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031810 	.word	0x00031810
     170:	00031813 	.word	0x00031813
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031810 	.word	0x00031810
     1bc:	00031810 	.word	0x00031810
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031810 	.word	0x00031810
     200:	00000000 	.word	0x00000000
     204:	00002548 	.word	0x00002548

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002548 	.word	0x00002548
     250:	00031814 	.word	0x00031814
     254:	000025a8 	.word	0x000025a8
     258:	00000000 	.word	0x00000000

0000025c <getSignal>:



//USEFUL FUNCTIONS SOUND---------------------------------------------------------------------------------

double getSignal(float freq, int time){
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd018 	sub	sp, sp, #24
     268:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     26c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int index = (int)(freq * time)%48000;
     270:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     274:	eb0006a0 	bl	1cfc <__aeabi_i2f>
     278:	e1a03000 	mov	r3, r0
     27c:	e1a00003 	mov	r0, r3
     280:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     284:	eb0006d3 	bl	1dd8 <__aeabi_fmul>
     288:	e1a03000 	mov	r3, r0
     28c:	e1a00003 	mov	r0, r3
     290:	eb00078e 	bl	20d0 <__aeabi_f2iz>
     294:	e1a03000 	mov	r3, r0
     298:	e30129f1 	movw	r2, #6641	; 0x19f1
     29c:	e3402576 	movt	r2, #1398	; 0x576
     2a0:	e0c21392 	smull	r1, r2, r2, r3
     2a4:	e1a01542 	asr	r1, r2, #10
     2a8:	e1a02fc3 	asr	r2, r3, #31
     2ac:	e0622001 	rsb	r2, r2, r1
     2b0:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2b4:	e0020291 	mul	r2, r1, r2
     2b8:	e0623003 	rsb	r3, r2, r3
     2bc:	e50b3008 	str	r3, [r11, #-8]
	double signal = sine[index];
     2c0:	e30235d4 	movw	r3, #9684	; 0x25d4
     2c4:	e3403000 	movt	r3, #0
     2c8:	e51b2008 	ldr	r2, [r11, #-8]
     2cc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     2d0:	e1a00003 	mov	r0, r3
     2d4:	eb00049f 	bl	1558 <__aeabi_i2d>
     2d8:	e1a02000 	mov	r2, r0
     2dc:	e1a03001 	mov	r3, r1
     2e0:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec
	return signal;
     2e4:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
}
     2e8:	e1a00002 	mov	r0, r2
     2ec:	e1a01003 	mov	r1, r3
     2f0:	e24bd004 	sub	sp, r11, #4
     2f4:	e8bd8800 	pop	{r11, pc}

000002f8 <createSignal>:

double createSignal(int* keysPressed, int time){
     2f8:	e92d4800 	push	{r11, lr}
     2fc:	e28db004 	add	r11, sp, #4
     300:	e24dd018 	sub	sp, sp, #24
     304:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     308:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int counter = 0;
     30c:	e3a03000 	mov	r3, #0
     310:	e50b3008 	str	r3, [r11, #-8]
	double totalSignal = 0;
     314:	e3a02000 	mov	r2, #0
     318:	e3a03000 	mov	r3, #0
     31c:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

	for(counter = 0; counter < 8; counter++){
     320:	e3a03000 	mov	r3, #0
     324:	e50b3008 	str	r3, [r11, #-8]
     328:	ea000017 	b	38c <createSignal+0x94>
		if(keysPressed[counter] == 1){
     32c:	e51b3008 	ldr	r3, [r11, #-8]
     330:	e1a03103 	lsl	r3, r3, #2
     334:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     338:	e0823003 	add	r3, r2, r3
     33c:	e5933000 	ldr	r3, [r3]
     340:	e3530001 	cmp	r3, #1
     344:	1a00000d 	bne	380 <createSignal+0x88>
			totalSignal += getSignal(freqArr[counter], time);
     348:	e30235b4 	movw	r3, #9652	; 0x25b4
     34c:	e3403000 	movt	r3, #0
     350:	e51b2008 	ldr	r2, [r11, #-8]
     354:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     358:	e1a00003 	mov	r0, r3
     35c:	e51b101c 	ldr	r1, [r11, #-28]	; 0xffffffe4
     360:	ebffffbd 	bl	25c <getSignal>
     364:	e1a02000 	mov	r2, r0
     368:	e1a03001 	mov	r3, r1
     36c:	e14b01d4 	ldrd	r0, [r11, #-20]	; 0xffffffec
     370:	eb0003ab 	bl	1224 <__adddf3>
     374:	e1a02000 	mov	r2, r0
     378:	e1a03001 	mov	r3, r1
     37c:	e14b21f4 	strd	r2, [r11, #-20]	; 0xffffffec

double createSignal(int* keysPressed, int time){
	int counter = 0;
	double totalSignal = 0;

	for(counter = 0; counter < 8; counter++){
     380:	e51b3008 	ldr	r3, [r11, #-8]
     384:	e2833001 	add	r3, r3, #1
     388:	e50b3008 	str	r3, [r11, #-8]
     38c:	e51b3008 	ldr	r3, [r11, #-8]
     390:	e3530007 	cmp	r3, #7
     394:	daffffe4 	ble	32c <createSignal+0x34>
		if(keysPressed[counter] == 1){
			totalSignal += getSignal(freqArr[counter], time);
		}
	}
	return totalSignal;
     398:	e14b21d4 	ldrd	r2, [r11, #-20]	; 0xffffffec
}
     39c:	e1a00002 	mov	r0, r2
     3a0:	e1a01003 	mov	r1, r3
     3a4:	e24bd004 	sub	sp, r11, #4
     3a8:	e8bd8800 	pop	{r11, pc}

000003ac <main>:


//MAIN---------------------------------------------------------------------------------------------------------
	
int main() {
     3ac:	e92d4810 	push	{r4, r11, lr}
     3b0:	e28db008 	add	r11, sp, #8
     3b4:	e24dd044 	sub	sp, sp, #68	; 0x44
	
	int_setup(1,(int[]){199}); // Case 199 (TIM0) is used from int_setup
     3b8:	e3a030c7 	mov	r3, #199	; 0xc7
     3bc:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
     3c0:	e24b302c 	sub	r3, r11, #44	; 0x2c
     3c4:	e3a00001 	mov	r0, #1
     3c8:	e1a01003 	mov	r1, r3
     3cc:	eb000320 	bl	1054 <int_setup>
	HPS_TIM_config_t hps_tim; 				
	hps_tim.tim = TIM0; 					
     3d0:	e3a03001 	mov	r3, #1
     3d4:	e54b3044 	strb	r3, [r11, #-68]	; 0xffffffbc
	hps_tim.timeout = 20; // Every 20 microseconds because of 48000Hz				
     3d8:	e3a03014 	mov	r3, #20
     3dc:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
	hps_tim.LD_en = 1;
     3e0:	e3a03001 	mov	r3, #1
     3e4:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
	hps_tim.INT_en = 1;
     3e8:	e3a03001 	mov	r3, #1
     3ec:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
	hps_tim.enable = 1;
     3f0:	e3a03001 	mov	r3, #1
     3f4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
	HPS_TIM_config_ASM(&hps_tim);
     3f8:	e24b3044 	sub	r3, r11, #68	; 0x44
     3fc:	e1a00003 	mov	r0, r3
     400:	eb000321 	bl	108c <HPS_TIM_config_ASM>

	//Variables
	int time = 0;
     404:	e3a03000 	mov	r3, #0
     408:	e50b3010 	str	r3, [r11, #-16]
	int breaker = 0;
     40c:	e3a03000 	mov	r3, #0
     410:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	//Volume delared earlier
	double sine = 0.0;
     414:	e3a02000 	mov	r2, #0
     418:	e3a03000 	mov	r3, #0
     41c:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc
	char inputKey;	
	char newKey = 0.0;
     420:	e3a03000 	mov	r3, #0
     424:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
     428:	ea000000 	b	430 <main+0x84>
			//audio FIFO
			audio_write_data_ASM(sine, sine);
			time++; 
		}	
		}
	}
     42c:	e1a00000 	nop			; (mov r0, r0)
	char inputKey;	
	char newKey = 0.0;
	
	while(1) {

		if(read_ps2_data_ASM(&inputKey)){ //Only execute if non-zero keyboard input
     430:	e24b3045 	sub	r3, r11, #69	; 0x45
     434:	e1a00003 	mov	r0, r3
     438:	eb0001c3 	bl	b4c <read_ps2_data_ASM>
     43c:	e1a03000 	mov	r3, r0
     440:	e3530000 	cmp	r3, #0
     444:	0a0000d1 	beq	790 <main+0x3e4>

			if(inputKey != newKey){ // If key changes reset position and clear the screen
     448:	e55b3045 	ldrb	r3, [r11, #-69]	; 0xffffffbb
     44c:	e55b2015 	ldrb	r2, [r11, #-21]	; 0xffffffeb
     450:	e1520003 	cmp	r2, r3
     454:	0a000001 	beq	460 <main+0xb4>
				//sine = 0;
				newKey = inputKey;
     458:	e55b3045 	ldrb	r3, [r11, #-69]	; 0xffffffbb
     45c:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
				}
			}

	//Presentation();

			switch(inputKey) { //Do something if key is pressed
     460:	e55b3045 	ldrb	r3, [r11, #-69]	; 0xffffffbb
     464:	e3530041 	cmp	r3, #65	; 0x41
     468:	0a0000a7 	beq	70c <main+0x360>
     46c:	e3530041 	cmp	r3, #65	; 0x41
     470:	ca00000d 	bgt	4ac <main+0x100>
     474:	e3530023 	cmp	r3, #35	; 0x23
     478:	0a000037 	beq	55c <main+0x1b0>
     47c:	e3530023 	cmp	r3, #35	; 0x23
     480:	ca000004 	bgt	498 <main+0xec>
     484:	e353001b 	cmp	r3, #27
     488:	0a000024 	beq	520 <main+0x174>
     48c:	e353001c 	cmp	r3, #28
     490:	0a000013 	beq	4e4 <main+0x138>
     494:	ea0000b1 	b	760 <main+0x3b4>
     498:	e353002b 	cmp	r3, #43	; 0x2b
     49c:	0a00003d 	beq	598 <main+0x1ec>
     4a0:	e353003b 	cmp	r3, #59	; 0x3b
     4a4:	0a00004a 	beq	5d4 <main+0x228>
     4a8:	ea0000ac 	b	760 <main+0x3b4>
     4ac:	e353004b 	cmp	r3, #75	; 0x4b
     4b0:	0a000065 	beq	64c <main+0x2a0>
     4b4:	e353004b 	cmp	r3, #75	; 0x4b
     4b8:	ca000004 	bgt	4d0 <main+0x124>
     4bc:	e3530042 	cmp	r3, #66	; 0x42
     4c0:	0a000052 	beq	610 <main+0x264>
     4c4:	e3530049 	cmp	r3, #73	; 0x49
     4c8:	0a00007d 	beq	6c4 <main+0x318>
     4cc:	ea0000a3 	b	760 <main+0x3b4>
     4d0:	e353004c 	cmp	r3, #76	; 0x4c
     4d4:	0a00006b 	beq	688 <main+0x2dc>
     4d8:	e35300f0 	cmp	r3, #240	; 0xf0
     4dc:	0a00009c 	beq	754 <main+0x3a8>
     4e0:	ea00009e 	b	760 <main+0x3b4>

				case 0x1C: // C = A note

					if(breaker == 1){ // If key is released mark:
     4e4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4e8:	e3530001 	cmp	r3, #1
     4ec:	1a000006 	bne	50c <main+0x160>
						keysPressed[0] = 0; // Change Key status
     4f0:	e301382c 	movw	r3, #6188	; 0x182c
     4f4:	e3403003 	movt	r3, #3
     4f8:	e3a02000 	mov	r2, #0
     4fc:	e5832000 	str	r2, [r3]
						breaker = 0; // Update Breaker
     500:	e3a03000 	mov	r3, #0
     504:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(42, 59, ' ');//Clear Key
					} else{
						keysPressed[0] = 1; // Otherwise mark key as pressed
						//VGA_write_char_ASM(42, 59, 'C'); // Write Key
					}
				break;
     508:	ea00009a 	b	778 <main+0x3cc>
					if(breaker == 1){ // If key is released mark:
						keysPressed[0] = 0; // Change Key status
						breaker = 0; // Update Breaker
						//VGA_write_char_ASM(42, 59, ' ');//Clear Key
					} else{
						keysPressed[0] = 1; // Otherwise mark key as pressed
     50c:	e301382c 	movw	r3, #6188	; 0x182c
     510:	e3403003 	movt	r3, #3
     514:	e3a02001 	mov	r2, #1
     518:	e5832000 	str	r2, [r3]
						//VGA_write_char_ASM(42, 59, 'C'); // Write Key
					}
				break;
     51c:	ea000095 	b	778 <main+0x3cc>

				case 0x1B: // S = D note
					if(breaker == 1){
     520:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     524:	e3530001 	cmp	r3, #1
     528:	1a000006 	bne	548 <main+0x19c>
						keysPressed[1] = 0;
     52c:	e301382c 	movw	r3, #6188	; 0x182c
     530:	e3403003 	movt	r3, #3
     534:	e3a02000 	mov	r2, #0
     538:	e5832004 	str	r2, [r3, #4]
						breaker = 0;
     53c:	e3a03000 	mov	r3, #0
     540:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(43, 59, ' ');
					} else{
						keysPressed[1] = 1;
						//VGA_write_char_ASM(43, 59, 'D');
					}
				break;
     544:	ea00008b 	b	778 <main+0x3cc>
					if(breaker == 1){
						keysPressed[1] = 0;
						breaker = 0;
						//VGA_write_char_ASM(43, 59, ' ');
					} else{
						keysPressed[1] = 1;
     548:	e301382c 	movw	r3, #6188	; 0x182c
     54c:	e3403003 	movt	r3, #3
     550:	e3a02001 	mov	r2, #1
     554:	e5832004 	str	r2, [r3, #4]
						//VGA_write_char_ASM(43, 59, 'D');
					}
				break;
     558:	ea000086 	b	778 <main+0x3cc>

				case 0x23: // D = E note
					if(breaker == 1){
     55c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     560:	e3530001 	cmp	r3, #1
     564:	1a000006 	bne	584 <main+0x1d8>
						keysPressed[2] = 0;
     568:	e301382c 	movw	r3, #6188	; 0x182c
     56c:	e3403003 	movt	r3, #3
     570:	e3a02000 	mov	r2, #0
     574:	e5832008 	str	r2, [r3, #8]
						breaker = 0;
     578:	e3a03000 	mov	r3, #0
     57c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(44, 59, ' ');
					} else{
						keysPressed[2] = 1;
						//VGA_write_char_ASM(44, 59, 'E');
					}
				break;
     580:	ea00007c 	b	778 <main+0x3cc>
					if(breaker == 1){
						keysPressed[2] = 0;
						breaker = 0;
						//VGA_write_char_ASM(44, 59, ' ');
					} else{
						keysPressed[2] = 1;
     584:	e301382c 	movw	r3, #6188	; 0x182c
     588:	e3403003 	movt	r3, #3
     58c:	e3a02001 	mov	r2, #1
     590:	e5832008 	str	r2, [r3, #8]
						//VGA_write_char_ASM(44, 59, 'E');
					}
				break;
     594:	ea000077 	b	778 <main+0x3cc>

				case 0x2B: // F = F note
					if(breaker == 1){
     598:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     59c:	e3530001 	cmp	r3, #1
     5a0:	1a000006 	bne	5c0 <main+0x214>
						keysPressed[3] = 0;
     5a4:	e301382c 	movw	r3, #6188	; 0x182c
     5a8:	e3403003 	movt	r3, #3
     5ac:	e3a02000 	mov	r2, #0
     5b0:	e583200c 	str	r2, [r3, #12]
						breaker = 0;
     5b4:	e3a03000 	mov	r3, #0
     5b8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(45, 59, ' ');
					} else{
						keysPressed[3] = 1;
						//VGA_write_char_ASM(45, 59, 'F');
					}
				break;
     5bc:	ea00006d 	b	778 <main+0x3cc>
					if(breaker == 1){
						keysPressed[3] = 0;
						breaker = 0;
						//VGA_write_char_ASM(45, 59, ' ');
					} else{
						keysPressed[3] = 1;
     5c0:	e301382c 	movw	r3, #6188	; 0x182c
     5c4:	e3403003 	movt	r3, #3
     5c8:	e3a02001 	mov	r2, #1
     5cc:	e583200c 	str	r2, [r3, #12]
						//VGA_write_char_ASM(45, 59, 'F');
					}
				break;
     5d0:	ea000068 	b	778 <main+0x3cc>
				case 0x3B: // J = G note
					if(breaker == 1){
     5d4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     5d8:	e3530001 	cmp	r3, #1
     5dc:	1a000006 	bne	5fc <main+0x250>
						keysPressed[4] = 0;
     5e0:	e301382c 	movw	r3, #6188	; 0x182c
     5e4:	e3403003 	movt	r3, #3
     5e8:	e3a02000 	mov	r2, #0
     5ec:	e5832010 	str	r2, [r3, #16]
						breaker = 0;
     5f0:	e3a03000 	mov	r3, #0
     5f4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(46, 59, ' ');
					} else{
						keysPressed[4] = 1;
						//VGA_write_char_ASM(46, 59, 'G');
					}
				break;
     5f8:	ea00005e 	b	778 <main+0x3cc>
					if(breaker == 1){
						keysPressed[4] = 0;
						breaker = 0;
						//VGA_write_char_ASM(46, 59, ' ');
					} else{
						keysPressed[4] = 1;
     5fc:	e301382c 	movw	r3, #6188	; 0x182c
     600:	e3403003 	movt	r3, #3
     604:	e3a02001 	mov	r2, #1
     608:	e5832010 	str	r2, [r3, #16]
						//VGA_write_char_ASM(46, 59, 'G');
					}
				break;
     60c:	ea000059 	b	778 <main+0x3cc>
				case 0x42: // K = A note
					if(breaker == 1){
     610:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     614:	e3530001 	cmp	r3, #1
     618:	1a000006 	bne	638 <main+0x28c>
						keysPressed[5] = 0;
     61c:	e301382c 	movw	r3, #6188	; 0x182c
     620:	e3403003 	movt	r3, #3
     624:	e3a02000 	mov	r2, #0
     628:	e5832014 	str	r2, [r3, #20]
						breaker = 0;
     62c:	e3a03000 	mov	r3, #0
     630:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(47, 59, ' ');
					} else{
						keysPressed[5] = 1;
						//VGA_write_char_ASM(47, 59, 'A');
					}
				break;
     634:	ea00004f 	b	778 <main+0x3cc>
					if(breaker == 1){
						keysPressed[5] = 0;
						breaker = 0;
						//VGA_write_char_ASM(47, 59, ' ');
					} else{
						keysPressed[5] = 1;
     638:	e301382c 	movw	r3, #6188	; 0x182c
     63c:	e3403003 	movt	r3, #3
     640:	e3a02001 	mov	r2, #1
     644:	e5832014 	str	r2, [r3, #20]
						//VGA_write_char_ASM(47, 59, 'A');
					}
				break;
     648:	ea00004a 	b	778 <main+0x3cc>
				case 0x4B: // L = B note
					if(breaker == 1){
     64c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     650:	e3530001 	cmp	r3, #1
     654:	1a000006 	bne	674 <main+0x2c8>
						keysPressed[6] = 0;
     658:	e301382c 	movw	r3, #6188	; 0x182c
     65c:	e3403003 	movt	r3, #3
     660:	e3a02000 	mov	r2, #0
     664:	e5832018 	str	r2, [r3, #24]
						breaker = 0;
     668:	e3a03000 	mov	r3, #0
     66c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(48, 59, ' ');
					} else{
						keysPressed[6] = 1;
						//VGA_write_char_ASM(48, 59, 'B');
					}
				break;
     670:	ea000040 	b	778 <main+0x3cc>
					if(breaker == 1){
						keysPressed[6] = 0;
						breaker = 0;
						//VGA_write_char_ASM(48, 59, ' ');
					} else{
						keysPressed[6] = 1;
     674:	e301382c 	movw	r3, #6188	; 0x182c
     678:	e3403003 	movt	r3, #3
     67c:	e3a02001 	mov	r2, #1
     680:	e5832018 	str	r2, [r3, #24]
						//VGA_write_char_ASM(48, 59, 'B');
					}
				break;
     684:	ea00003b 	b	778 <main+0x3cc>
				case 0x4C: // ; = C note
					if(breaker == 1){
     688:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     68c:	e3530001 	cmp	r3, #1
     690:	1a000006 	bne	6b0 <main+0x304>
						keysPressed[7] = 0;
     694:	e301382c 	movw	r3, #6188	; 0x182c
     698:	e3403003 	movt	r3, #3
     69c:	e3a02000 	mov	r2, #0
     6a0:	e583201c 	str	r2, [r3, #28]
						breaker = 0;
     6a4:	e3a03000 	mov	r3, #0
     6a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
						//VGA_write_char_ASM(49, 59, ' ');
					}else{
						keysPressed[7] = 1;
						//VGA_write_char_ASM(49, 59, 'C');
					}
				break;
     6ac:	ea000031 	b	778 <main+0x3cc>
					if(breaker == 1){
						keysPressed[7] = 0;
						breaker = 0;
						//VGA_write_char_ASM(49, 59, ' ');
					}else{
						keysPressed[7] = 1;
     6b0:	e301382c 	movw	r3, #6188	; 0x182c
     6b4:	e3403003 	movt	r3, #3
     6b8:	e3a02001 	mov	r2, #1
     6bc:	e583201c 	str	r2, [r3, #28]
						//VGA_write_char_ASM(49, 59, 'C');
					}
				break;
     6c0:	ea00002c 	b	778 <main+0x3cc>
				//Volume Controls  
				case 0x49: // Volume up
					if(breaker == 1){
     6c4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     6c8:	e3530001 	cmp	r3, #1
     6cc:	1a000026 	bne	76c <main+0x3c0>
						if(volume_BB<10)
     6d0:	e30235b0 	movw	r3, #9648	; 0x25b0
     6d4:	e3403000 	movt	r3, #0
     6d8:	e5933000 	ldr	r3, [r3]
     6dc:	e3530009 	cmp	r3, #9
     6e0:	ca000006 	bgt	700 <main+0x354>
							volume_BB++;
     6e4:	e30235b0 	movw	r3, #9648	; 0x25b0
     6e8:	e3403000 	movt	r3, #0
     6ec:	e5933000 	ldr	r3, [r3]
     6f0:	e2832001 	add	r2, r3, #1
     6f4:	e30235b0 	movw	r3, #9648	; 0x25b0
     6f8:	e3403000 	movt	r3, #0
     6fc:	e5832000 	str	r2, [r3]
							breaker = 0;
     700:	e3a03000 	mov	r3, #0
     704:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					}
				break;
     708:	ea000017 	b	76c <main+0x3c0>

				case 0x41: //Volume down
					if(breaker == 1){
     70c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     710:	e3530001 	cmp	r3, #1
     714:	1a000016 	bne	774 <main+0x3c8>
						if(volume_BB>0)
     718:	e30235b0 	movw	r3, #9648	; 0x25b0
     71c:	e3403000 	movt	r3, #0
     720:	e5933000 	ldr	r3, [r3]
     724:	e3530000 	cmp	r3, #0
     728:	da000006 	ble	748 <main+0x39c>
							volume_BB--;
     72c:	e30235b0 	movw	r3, #9648	; 0x25b0
     730:	e3403000 	movt	r3, #0
     734:	e5933000 	ldr	r3, [r3]
     738:	e2432001 	sub	r2, r3, #1
     73c:	e30235b0 	movw	r3, #9648	; 0x25b0
     740:	e3403000 	movt	r3, #0
     744:	e5832000 	str	r2, [r3]
							breaker = 0;
     748:	e3a03000 	mov	r3, #0
     74c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					}
				break;
     750:	ea000007 	b	774 <main+0x3c8>
				case 0xF0: //The break code is the same for all keys
					breaker = 1;
     754:	e3a03001 	mov	r3, #1
     758:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				break;
     75c:	ea000005 	b	778 <main+0x3cc>
				default:
					breaker = 0;
     760:	e3a03000 	mov	r3, #0
     764:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     768:	ea000002 	b	778 <main+0x3cc>
					if(breaker == 1){
						if(volume_BB<10)
							volume_BB++;
							breaker = 0;
					}
				break;
     76c:	e1a00000 	nop			; (mov r0, r0)
     770:	ea000000 	b	778 <main+0x3cc>
					if(breaker == 1){
						if(volume_BB>0)
							volume_BB--;
							breaker = 0;
					}
				break;
     774:	e1a00000 	nop			; (mov r0, r0)
				break;
				default:
					breaker = 0;
			}	
	
			char writeVol=volume_BB+48;
     778:	e30235b0 	movw	r3, #9648	; 0x25b0
     77c:	e3403000 	movt	r3, #0
     780:	e5933000 	ldr	r3, [r3]
     784:	e6ef3073 	uxtb	r3, r3
     788:	e2833030 	add	r3, r3, #48	; 0x30
     78c:	e54b3025 	strb	r3, [r11, #-37]	; 0xffffffdb
				//VGA_write_char_ASM(77, 59, '1');
				//VGA_write_char_ASM(78, 59, '0');
			}
		}

	sine = createSignal(keysPressed, time);
     790:	e301082c 	movw	r0, #6188	; 0x182c
     794:	e3400003 	movt	r0, #3
     798:	e51b1010 	ldr	r1, [r11, #-16]
     79c:	ebfffed5 	bl	2f8 <createSignal>
     7a0:	e14b02f4 	strd	r0, [r11, #-36]	; 0xffffffdc
	sine = volume_BB * sine;
     7a4:	e30235b0 	movw	r3, #9648	; 0x25b0
     7a8:	e3403000 	movt	r3, #0
     7ac:	e5933000 	ldr	r3, [r3]
     7b0:	e1a00003 	mov	r0, r3
     7b4:	eb000367 	bl	1558 <__aeabi_i2d>
     7b8:	e1a02000 	mov	r2, r0
     7bc:	e1a03001 	mov	r3, r1
     7c0:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     7c4:	eb00039a 	bl	1634 <__aeabi_dmul>
     7c8:	e1a02000 	mov	r2, r0
     7cc:	e1a03001 	mov	r3, r1
     7d0:	e14b22f4 	strd	r2, [r11, #-36]	; 0xffffffdc

	if(hps_tim0_int_flag == 1) {
     7d4:	e300385c 	movw	r3, #2140	; 0x85c
     7d8:	e3403000 	movt	r3, #0
     7dc:	e5933000 	ldr	r3, [r3]
     7e0:	e3530001 	cmp	r3, #1
     7e4:	1affff10 	bne	42c <main+0x80>
		hps_tim0_int_flag = 0;
     7e8:	e300385c 	movw	r3, #2140	; 0x85c
     7ec:	e3403000 	movt	r3, #0
     7f0:	e3a02000 	mov	r2, #0
     7f4:	e5832000 	str	r2, [r3]

		if(audio_write_data_ASM(sine, sine)==1){
     7f8:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     7fc:	eb0004b3 	bl	1ad0 <__aeabi_d2iz>
     800:	e1a04000 	mov	r4, r0
     804:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     808:	eb0004b0 	bl	1ad0 <__aeabi_d2iz>
     80c:	e1a03000 	mov	r3, r0
     810:	e1a00004 	mov	r0, r4
     814:	e1a01003 	mov	r1, r3
     818:	eb00005a 	bl	988 <audio_write_data_ASM>
     81c:	e1a03000 	mov	r3, r0
     820:	e3530001 	cmp	r3, #1
     824:	1affff00 	bne	42c <main+0x80>
			//Only do stuff if there's space in the 
			//audio FIFO
			audio_write_data_ASM(sine, sine);
     828:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     82c:	eb0004a7 	bl	1ad0 <__aeabi_d2iz>
     830:	e1a04000 	mov	r4, r0
     834:	e14b02d4 	ldrd	r0, [r11, #-36]	; 0xffffffdc
     838:	eb0004a4 	bl	1ad0 <__aeabi_d2iz>
     83c:	e1a03000 	mov	r3, r0
     840:	e1a00004 	mov	r0, r4
     844:	e1a01003 	mov	r1, r3
     848:	eb00004e 	bl	988 <audio_write_data_ASM>
			time++; 
     84c:	e51b3010 	ldr	r3, [r11, #-16]
     850:	e2833001 	add	r3, r3, #1
     854:	e50b3010 	str	r3, [r11, #-16]
		}	
		}
	}
     858:	eafffef3 	b	42c <main+0x80>

0000085c <hps_tim0_int_flag>:
     85c:	00000000 	.word	0x00000000

00000860 <A9_PRIV_TIM_ISR>:

hps_tim0_int_flag:
	.word 0x0
	
A9_PRIV_TIM_ISR:
	BX LR
     860:	e12fff1e 	bx	lr

00000864 <HPS_GPIO1_ISR>:

HPS_GPIO1_ISR:
	BX LR
     864:	e12fff1e 	bx	lr

00000868 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     868:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     86c:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     870:	eb00023a 	bl	1160 <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =hps_tim0_int_flag
     874:	e59f003c 	ldr	r0, [pc, #60]	; 8b8 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     878:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     87c:	e5801000 	str	r1, [r0]

	POP {LR}
     880:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     884:	e12fff1e 	bx	lr

00000888 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     888:	e12fff1e 	bx	lr

0000088c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     88c:	e12fff1e 	bx	lr

00000890 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     890:	e12fff1e 	bx	lr

00000894 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     894:	e12fff1e 	bx	lr

00000898 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     898:	e12fff1e 	bx	lr

0000089c <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     89c:	e12fff1e 	bx	lr

000008a0 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     8a0:	e12fff1e 	bx	lr

000008a4 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     8a4:	e12fff1e 	bx	lr

000008a8 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     8a8:	e12fff1e 	bx	lr

000008ac <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     8ac:	e12fff1e 	bx	lr

000008b0 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     8b0:	e12fff1e 	bx	lr

000008b4 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     8b4:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM
	
	LDR R0, =hps_tim0_int_flag
     8b8:	0000085c 	.word	0x0000085c

000008bc <audio_read_data_ASM>:
     8bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     8c0:	e92d0003 	push	{r0, r1}
     8c4:	eb000093 	bl	b18 <audio_read_ralc_ASM>
     8c8:	e3500000 	cmp	r0, #0
     8cc:	08bd0003 	popeq	{r0, r1}
     8d0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     8d4:	03a00000 	moveq	r0, #0
     8d8:	012fff1e 	bxeq	lr
     8dc:	eb000092 	bl	b2c <audio_read_rarc_ASM>
     8e0:	e3500000 	cmp	r0, #0
     8e4:	08bd0003 	popeq	{r0, r1}
     8e8:	03a00000 	moveq	r0, #0
     8ec:	012fff1e 	bxeq	lr
     8f0:	e8bd0003 	pop	{r0, r1}
     8f4:	e59f2240 	ldr	r2, [pc, #576]	; b3c <audio_read_rarc_ASM+0x10>
     8f8:	e5922000 	ldr	r2, [r2]
     8fc:	e5802000 	str	r2, [r0]
     900:	e59f3238 	ldr	r3, [pc, #568]	; b40 <audio_read_rarc_ASM+0x14>
     904:	e5933000 	ldr	r3, [r3]
     908:	e5813000 	str	r3, [r1]
     90c:	e3a00001 	mov	r0, #1

00000910 <audio_read_leftdata_ASM>:
     910:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     914:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     918:	eb00007e 	bl	b18 <audio_read_ralc_ASM>
     91c:	e3500000 	cmp	r0, #0
     920:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     924:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     928:	03a00000 	moveq	r0, #0
     92c:	012fff1e 	bxeq	lr
     930:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     934:	e59f2200 	ldr	r2, [pc, #512]	; b3c <audio_read_rarc_ASM+0x10>
     938:	e5922000 	ldr	r2, [r2]
     93c:	e5802000 	str	r2, [r0]
     940:	e3a00001 	mov	r0, #1
     944:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     948:	e12fff1e 	bx	lr

0000094c <audio_read_rightdata_ASM>:
     94c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     950:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     954:	eb000074 	bl	b2c <audio_read_rarc_ASM>
     958:	e3500000 	cmp	r0, #0
     95c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     960:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     964:	03a00000 	moveq	r0, #0
     968:	012fff1e 	bxeq	lr
     96c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     970:	e59f21c8 	ldr	r2, [pc, #456]	; b40 <audio_read_rarc_ASM+0x14>
     974:	e5922000 	ldr	r2, [r2]
     978:	e5802000 	str	r2, [r0]
     97c:	e3a00001 	mov	r0, #1
     980:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     984:	e12fff1e 	bx	lr

00000988 <audio_write_data_ASM>:
     988:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     98c:	e92d0003 	push	{r0, r1}
     990:	eb000056 	bl	af0 <audio_read_wslc_ASM>
     994:	e3500000 	cmp	r0, #0
     998:	08bd0003 	popeq	{r0, r1}
     99c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     9a0:	03a00000 	moveq	r0, #0
     9a4:	012fff1e 	bxeq	lr
     9a8:	eb000055 	bl	b04 <audio_read_wsrc_ASM>
     9ac:	e3500000 	cmp	r0, #0
     9b0:	08bd0003 	popeq	{r0, r1}
     9b4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     9b8:	03a00000 	moveq	r0, #0
     9bc:	012fff1e 	bxeq	lr
     9c0:	e8bd0003 	pop	{r0, r1}
     9c4:	e59f2170 	ldr	r2, [pc, #368]	; b3c <audio_read_rarc_ASM+0x10>
     9c8:	e5820000 	str	r0, [r2]
     9cc:	e59f316c 	ldr	r3, [pc, #364]	; b40 <audio_read_rarc_ASM+0x14>
     9d0:	e5831000 	str	r1, [r3]
     9d4:	e3a00001 	mov	r0, #1
     9d8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     9dc:	e12fff1e 	bx	lr

000009e0 <audio_write_leftdata_ASM>:
     9e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     9e4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     9e8:	eb000040 	bl	af0 <audio_read_wslc_ASM>
     9ec:	e3500000 	cmp	r0, #0
     9f0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     9f4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     9f8:	03a00000 	moveq	r0, #0
     9fc:	012fff1e 	bxeq	lr
     a00:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     a04:	e59f2130 	ldr	r2, [pc, #304]	; b3c <audio_read_rarc_ASM+0x10>
     a08:	e5820000 	str	r0, [r2]
     a0c:	e3a00001 	mov	r0, #1
     a10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     a14:	e12fff1e 	bx	lr

00000a18 <audio_write_rightdata_ASM>:
     a18:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     a1c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     a20:	eb000037 	bl	b04 <audio_read_wsrc_ASM>
     a24:	e3500000 	cmp	r0, #0
     a28:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     a2c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     a30:	03a00000 	moveq	r0, #0
     a34:	012fff1e 	bxeq	lr
     a38:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     a3c:	e59f20fc 	ldr	r2, [pc, #252]	; b40 <audio_read_rarc_ASM+0x14>
     a40:	e5820000 	str	r0, [r2]
     a44:	e3a00001 	mov	r0, #1
     a48:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     a4c:	e12fff1e 	bx	lr

00000a50 <audio_enable_read_fifo_clear_ASM>:
     a50:	e59f00ec 	ldr	r0, [pc, #236]	; b44 <audio_read_rarc_ASM+0x18>
     a54:	e5901000 	ldr	r1, [r0]
     a58:	e3811004 	orr	r1, r1, #4
     a5c:	e5801000 	str	r1, [r0]
     a60:	e12fff1e 	bx	lr

00000a64 <audio_enable_write_fifo_clear_ASM>:
     a64:	e59f00d8 	ldr	r0, [pc, #216]	; b44 <audio_read_rarc_ASM+0x18>
     a68:	e5901000 	ldr	r1, [r0]
     a6c:	e3811008 	orr	r1, r1, #8
     a70:	e5801000 	str	r1, [r0]
     a74:	e12fff1e 	bx	lr

00000a78 <audio_disable_read_fifo_clear_ASM>:
     a78:	e59f00c4 	ldr	r0, [pc, #196]	; b44 <audio_read_rarc_ASM+0x18>
     a7c:	e5901000 	ldr	r1, [r0]
     a80:	e3c11004 	bic	r1, r1, #4
     a84:	e5801000 	str	r1, [r0]
     a88:	e12fff1e 	bx	lr

00000a8c <audio_disable_write_fifo_clear_ASM>:
     a8c:	e59f00b0 	ldr	r0, [pc, #176]	; b44 <audio_read_rarc_ASM+0x18>
     a90:	e5901000 	ldr	r1, [r0]
     a94:	e3c11008 	bic	r1, r1, #8
     a98:	e5801000 	str	r1, [r0]
     a9c:	e12fff1e 	bx	lr

00000aa0 <audio_enable_read_int_ASM>:
     aa0:	e59f009c 	ldr	r0, [pc, #156]	; b44 <audio_read_rarc_ASM+0x18>
     aa4:	e5901000 	ldr	r1, [r0]
     aa8:	e3811001 	orr	r1, r1, #1
     aac:	e5801000 	str	r1, [r0]
     ab0:	e12fff1e 	bx	lr

00000ab4 <audio_enable_write_int_ASM>:
     ab4:	e59f0088 	ldr	r0, [pc, #136]	; b44 <audio_read_rarc_ASM+0x18>
     ab8:	e5901000 	ldr	r1, [r0]
     abc:	e3811002 	orr	r1, r1, #2
     ac0:	e5801000 	str	r1, [r0]
     ac4:	e12fff1e 	bx	lr

00000ac8 <audio_disable_read_int_ASM>:
     ac8:	e59f0074 	ldr	r0, [pc, #116]	; b44 <audio_read_rarc_ASM+0x18>
     acc:	e5901000 	ldr	r1, [r0]
     ad0:	e3c11001 	bic	r1, r1, #1
     ad4:	e5801000 	str	r1, [r0]
     ad8:	e12fff1e 	bx	lr

00000adc <audio_disable_write_int_ASM>:
     adc:	e59f0060 	ldr	r0, [pc, #96]	; b44 <audio_read_rarc_ASM+0x18>
     ae0:	e5901000 	ldr	r1, [r0]
     ae4:	e3c11002 	bic	r1, r1, #2
     ae8:	e5801000 	str	r1, [r0]
     aec:	e12fff1e 	bx	lr

00000af0 <audio_read_wslc_ASM>:
     af0:	e59f0050 	ldr	r0, [pc, #80]	; b48 <audio_read_rarc_ASM+0x1c>
     af4:	e5900000 	ldr	r0, [r0]
     af8:	e1a00c20 	lsr	r0, r0, #24
     afc:	e20000ff 	and	r0, r0, #255	; 0xff
     b00:	e12fff1e 	bx	lr

00000b04 <audio_read_wsrc_ASM>:
     b04:	e59f003c 	ldr	r0, [pc, #60]	; b48 <audio_read_rarc_ASM+0x1c>
     b08:	e5900000 	ldr	r0, [r0]
     b0c:	e1a00820 	lsr	r0, r0, #16
     b10:	e20000ff 	and	r0, r0, #255	; 0xff
     b14:	e12fff1e 	bx	lr

00000b18 <audio_read_ralc_ASM>:
     b18:	e59f0028 	ldr	r0, [pc, #40]	; b48 <audio_read_rarc_ASM+0x1c>
     b1c:	e5900000 	ldr	r0, [r0]
     b20:	e1a00420 	lsr	r0, r0, #8
     b24:	e20000ff 	and	r0, r0, #255	; 0xff
     b28:	e12fff1e 	bx	lr

00000b2c <audio_read_rarc_ASM>:
     b2c:	e59f0014 	ldr	r0, [pc, #20]	; b48 <audio_read_rarc_ASM+0x1c>
     b30:	e5900000 	ldr	r0, [r0]
     b34:	e20000ff 	and	r0, r0, #255	; 0xff
     b38:	e12fff1e 	bx	lr
     b3c:	ff203048 	.word	0xff203048
     b40:	ff20304c 	.word	0xff20304c
     b44:	ff203040 	.word	0xff203040
     b48:	ff203044 	.word	0xff203044

00000b4c <read_ps2_data_ASM>:
     b4c:	e59f114c 	ldr	r1, [pc, #332]	; ca0 <ps2_fifo_ravail+0x4>
     b50:	e5911000 	ldr	r1, [r1]
     b54:	e3a02902 	mov	r2, #32768	; 0x8000
     b58:	e1110002 	tst	r1, r2
     b5c:	03a00000 	moveq	r0, #0
     b60:	012fff1e 	bxeq	lr
     b64:	e20120ff 	and	r2, r1, #255	; 0xff
     b68:	e5c02000 	strb	r2, [r0]
     b6c:	e59f2130 	ldr	r2, [pc, #304]	; ca4 <ps2_fifo_ravail+0x8>
     b70:	e0010002 	and	r0, r1, r2
     b74:	e1a00820 	lsr	r0, r0, #16
     b78:	e12fff1e 	bx	lr

00000b7c <enable_ps2_int_ASM>:
     b7c:	e59f011c 	ldr	r0, [pc, #284]	; ca0 <ps2_fifo_ravail+0x4>
     b80:	e3a01001 	mov	r1, #1
     b84:	e5c01004 	strb	r1, [r0, #4]
     b88:	e12fff1e 	bx	lr

00000b8c <disable_ps2_int_ASM>:
     b8c:	e59f010c 	ldr	r0, [pc, #268]	; ca0 <ps2_fifo_ravail+0x4>
     b90:	e3a01000 	mov	r1, #0
     b94:	e5c01004 	strb	r1, [r0, #4]
     b98:	e12fff1e 	bx	lr

00000b9c <ps2_fifo_data>:
	...

00000c9c <ps2_fifo_ravail>:
     c9c:	00000000 	.word	0x00000000
     ca0:	ff200100 	.word	0xff200100
     ca4:	ffff0000 	.word	0xffff0000

00000ca8 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     ca8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cac:	e28db000 	add	r11, sp, #0
     cb0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     cb4:	e3a030d3 	mov	r3, #211	; 0xd3
     cb8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     cbc:	e51b3008 	ldr	r3, [r11, #-8]
     cc0:	e129f003 	msr	CPSR_fc, r3
}
     cc4:	e28bd000 	add	sp, r11, #0
     cc8:	e8bd0800 	ldmfd	sp!, {r11}
     ccc:	e12fff1e 	bx	lr

00000cd0 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     cd0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cd4:	e28db000 	add	r11, sp, #0
     cd8:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     cdc:	e3a03053 	mov	r3, #83	; 0x53
     ce0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     ce4:	e51b3008 	ldr	r3, [r11, #-8]
     ce8:	e129f003 	msr	CPSR_fc, r3
}
     cec:	e28bd000 	add	sp, r11, #0
     cf0:	e8bd0800 	ldmfd	sp!, {r11}
     cf4:	e12fff1e 	bx	lr

00000cf8 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     cf8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cfc:	e28db000 	add	r11, sp, #0
     d00:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     d04:	e3e03007 	mvn	r3, #7
     d08:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     d0c:	e3a030d2 	mov	r3, #210	; 0xd2
     d10:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     d14:	e51b300c 	ldr	r3, [r11, #-12]
     d18:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     d1c:	e51b3008 	ldr	r3, [r11, #-8]
     d20:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     d24:	e3a030d3 	mov	r3, #211	; 0xd3
     d28:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     d2c:	e51b300c 	ldr	r3, [r11, #-12]
     d30:	e129f003 	msr	CPSR_fc, r3
}
     d34:	e28bd000 	add	sp, r11, #0
     d38:	e8bd0800 	ldmfd	sp!, {r11}
     d3c:	e12fff1e 	bx	lr

00000d40 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     d40:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d44:	e28db000 	add	r11, sp, #0
     d48:	e24dd01c 	sub	sp, sp, #28
     d4c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     d50:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     d54:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d58:	e1a031c3 	asr	r3, r3, #3
     d5c:	e3c33003 	bic	r3, r3, #3
     d60:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     d64:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d68:	e203301f 	and	r3, r3, #31
     d6c:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     d70:	e3a02001 	mov	r2, #1
     d74:	e51b300c 	ldr	r3, [r11, #-12]
     d78:	e1a03312 	lsl	r3, r2, r3
     d7c:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     d80:	e51b3008 	ldr	r3, [r11, #-8]
     d84:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     d88:	e2433c03 	sub	r3, r3, #768	; 0x300
     d8c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     d90:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     d94:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     d98:	e5921000 	ldr	r1, [r2]
     d9c:	e51b2010 	ldr	r2, [r11, #-16]
     da0:	e1812002 	orr	r2, r1, r2
     da4:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     da8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     dac:	e3c33003 	bic	r3, r3, #3
     db0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     db4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     db8:	e2033003 	and	r3, r3, #3
     dbc:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     dc0:	e51b2008 	ldr	r2, [r11, #-8]
     dc4:	e51b300c 	ldr	r3, [r11, #-12]
     dc8:	e0823003 	add	r3, r2, r3
     dcc:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     dd0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     dd4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     dd8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     ddc:	e6ef2072 	uxtb	r2, r2
     de0:	e5c32000 	strb	r2, [r3]
}
     de4:	e28bd000 	add	sp, r11, #0
     de8:	e8bd0800 	ldmfd	sp!, {r11}
     dec:	e12fff1e 	bx	lr

00000df0 <config_GIC>:

void config_GIC(int len, int* IDs) {
     df0:	e92d4800 	push	{r11, lr}
     df4:	e28db004 	add	r11, sp, #4
     df8:	e24dd010 	sub	sp, sp, #16
     dfc:	e50b0010 	str	r0, [r11, #-16]
     e00:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     e04:	e3a03000 	mov	r3, #0
     e08:	e50b3008 	str	r3, [r11, #-8]
     e0c:	ea00000a 	b	e3c <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     e10:	e51b3008 	ldr	r3, [r11, #-8]
     e14:	e1a03103 	lsl	r3, r3, #2
     e18:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     e1c:	e0823003 	add	r3, r2, r3
     e20:	e5933000 	ldr	r3, [r3]
     e24:	e1a00003 	mov	r0, r3
     e28:	e3a01001 	mov	r1, #1
     e2c:	ebffffc3 	bl	d40 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     e30:	e51b3008 	ldr	r3, [r11, #-8]
     e34:	e2833001 	add	r3, r3, #1
     e38:	e50b3008 	str	r3, [r11, #-8]
     e3c:	e51b2008 	ldr	r2, [r11, #-8]
     e40:	e51b3010 	ldr	r3, [r11, #-16]
     e44:	e1520003 	cmp	r2, r3
     e48:	bafffff0 	blt	e10 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     e4c:	e30c3104 	movw	r3, #49412	; 0xc104
     e50:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e54:	e30f2fff 	movw	r2, #65535	; 0xffff
     e58:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     e5c:	e3a03cc1 	mov	r3, #49408	; 0xc100
     e60:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e64:	e3a02001 	mov	r2, #1
     e68:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     e6c:	e3a03a0d 	mov	r3, #53248	; 0xd000
     e70:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e74:	e3a02001 	mov	r2, #1
     e78:	e5832000 	str	r2, [r3]
}
     e7c:	e24bd004 	sub	sp, r11, #4
     e80:	e8bd8800 	pop	{r11, pc}

00000e84 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     e84:	e24ee004 	sub	lr, lr, #4
     e88:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     e8c:	e28db018 	add	r11, sp, #24
     e90:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     e94:	e30c310c 	movw	r3, #49420	; 0xc10c
     e98:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e9c:	e5933000 	ldr	r3, [r3]
     ea0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     ea4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     ea8:	e3530053 	cmp	r3, #83	; 0x53
     eac:	0a00003d 	beq	fa8 <__cs3_isr_irq+0x124>
     eb0:	e3530053 	cmp	r3, #83	; 0x53
     eb4:	ca000011 	bgt	f00 <__cs3_isr_irq+0x7c>
     eb8:	e353004e 	cmp	r3, #78	; 0x4e
     ebc:	0a000031 	beq	f88 <__cs3_isr_irq+0x104>
     ec0:	e353004e 	cmp	r3, #78	; 0x4e
     ec4:	ca000006 	bgt	ee4 <__cs3_isr_irq+0x60>
     ec8:	e3530048 	cmp	r3, #72	; 0x48
     ecc:	0a000029 	beq	f78 <__cs3_isr_irq+0xf4>
     ed0:	e3530049 	cmp	r3, #73	; 0x49
     ed4:	0a000029 	beq	f80 <__cs3_isr_irq+0xfc>
     ed8:	e353001d 	cmp	r3, #29
     edc:	0a000019 	beq	f48 <__cs3_isr_irq+0xc4>
     ee0:	ea000036 	b	fc0 <__cs3_isr_irq+0x13c>
     ee4:	e3530050 	cmp	r3, #80	; 0x50
     ee8:	0a00002a 	beq	f98 <__cs3_isr_irq+0x114>
     eec:	e3530050 	cmp	r3, #80	; 0x50
     ef0:	ba000026 	blt	f90 <__cs3_isr_irq+0x10c>
     ef4:	e3530051 	cmp	r3, #81	; 0x51
     ef8:	0a000028 	beq	fa0 <__cs3_isr_irq+0x11c>
     efc:	ea00002f 	b	fc0 <__cs3_isr_irq+0x13c>
     f00:	e35300c7 	cmp	r3, #199	; 0xc7
     f04:	0a000013 	beq	f58 <__cs3_isr_irq+0xd4>
     f08:	e35300c7 	cmp	r3, #199	; 0xc7
     f0c:	ca000006 	bgt	f2c <__cs3_isr_irq+0xa8>
     f10:	e3530059 	cmp	r3, #89	; 0x59
     f14:	0a000027 	beq	fb8 <__cs3_isr_irq+0x134>
     f18:	e35300c5 	cmp	r3, #197	; 0xc5
     f1c:	0a00000b 	beq	f50 <__cs3_isr_irq+0xcc>
     f20:	e3530054 	cmp	r3, #84	; 0x54
     f24:	0a000021 	beq	fb0 <__cs3_isr_irq+0x12c>
     f28:	ea000024 	b	fc0 <__cs3_isr_irq+0x13c>
     f2c:	e35300c9 	cmp	r3, #201	; 0xc9
     f30:	0a00000c 	beq	f68 <__cs3_isr_irq+0xe4>
     f34:	e35300c9 	cmp	r3, #201	; 0xc9
     f38:	ba000008 	blt	f60 <__cs3_isr_irq+0xdc>
     f3c:	e35300ca 	cmp	r3, #202	; 0xca
     f40:	0a00000a 	beq	f70 <__cs3_isr_irq+0xec>
     f44:	ea00001d 	b	fc0 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     f48:	ebfffe44 	bl	860 <A9_PRIV_TIM_ISR>
     f4c:	ea00001c 	b	fc4 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     f50:	ebfffe43 	bl	864 <HPS_GPIO1_ISR>
     f54:	ea00001a 	b	fc4 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     f58:	ebfffe42 	bl	868 <HPS_TIM0_ISR>
     f5c:	ea000018 	b	fc4 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     f60:	ebfffe48 	bl	888 <HPS_TIM1_ISR>
     f64:	ea000016 	b	fc4 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     f68:	ebfffe47 	bl	88c <HPS_TIM2_ISR>
     f6c:	ea000014 	b	fc4 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     f70:	ebfffe46 	bl	890 <HPS_TIM3_ISR>
     f74:	ea000012 	b	fc4 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     f78:	ebfffe45 	bl	894 <FPGA_INTERVAL_TIM_ISR>
     f7c:	ea000010 	b	fc4 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     f80:	ebfffe44 	bl	898 <FPGA_PB_KEYS_ISR>
     f84:	ea00000e 	b	fc4 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     f88:	ebfffe43 	bl	89c <FPGA_Audio_ISR>
     f8c:	ea00000c 	b	fc4 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     f90:	ebfffe42 	bl	8a0 <FPGA_PS2_ISR>
     f94:	ea00000a 	b	fc4 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     f98:	ebfffe41 	bl	8a4 <FPGA_JTAG_ISR>
     f9c:	ea000008 	b	fc4 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     fa0:	ebfffe40 	bl	8a8 <FPGA_IrDA_ISR>
     fa4:	ea000006 	b	fc4 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     fa8:	ebfffe3f 	bl	8ac <FPGA_JP1_ISR>
     fac:	ea000004 	b	fc4 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     fb0:	ebfffe3e 	bl	8b0 <FPGA_JP2_ISR>
     fb4:	ea000002 	b	fc4 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     fb8:	ebfffe3d 	bl	8b4 <FPGA_PS2_DUAL_ISR>
     fbc:	ea000000 	b	fc4 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     fc0:	eafffffe 	b	fc0 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     fc4:	e30c3110 	movw	r3, #49424	; 0xc110
     fc8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     fcc:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     fd0:	e5832000 	str	r2, [r3]
}
     fd4:	e24bd018 	sub	sp, r11, #24
     fd8:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000fdc <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     fdc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fe0:	e28db000 	add	r11, sp, #0
	while(1);
     fe4:	eafffffe 	b	fe4 <__cs3_reset+0x8>

00000fe8 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     fe8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fec:	e28db000 	add	r11, sp, #0
	while(1);
     ff0:	eafffffe 	b	ff0 <__cs3_isr_undef+0x8>

00000ff4 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     ff4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ff8:	e28db000 	add	r11, sp, #0
	while(1);
     ffc:	eafffffe 	b	ffc <__cs3_isr_swi+0x8>

00001000 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1000:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1004:	e28db000 	add	r11, sp, #0
	while(1);
    1008:	eafffffe 	b	1008 <__cs3_isr_pabort+0x8>

0000100c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    100c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1010:	e28db000 	add	r11, sp, #0
	while(1);
    1014:	eafffffe 	b	1014 <__cs3_isr_dabort+0x8>

00001018 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1018:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    101c:	e28db000 	add	r11, sp, #0
	while(1);
    1020:	eafffffe 	b	1020 <__cs3_isr_fiq+0x8>

00001024 <fix_bug>:
}

void fix_bug() {
    1024:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1028:	e28db000 	add	r11, sp, #0
    102c:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1030:	e30d3198 	movw	r3, #53656	; 0xd198
    1034:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1038:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    103c:	e51b3008 	ldr	r3, [r11, #-8]
    1040:	e3a02703 	mov	r2, #786432	; 0xc0000
    1044:	e5832000 	str	r2, [r3]
}
    1048:	e28bd000 	add	sp, r11, #0
    104c:	e8bd0800 	ldmfd	sp!, {r11}
    1050:	e12fff1e 	bx	lr

00001054 <int_setup>:

void int_setup(int len, int* IDs) {
    1054:	e92d4800 	push	{r11, lr}
    1058:	e28db004 	add	r11, sp, #4
    105c:	e24dd008 	sub	sp, sp, #8
    1060:	e50b0008 	str	r0, [r11, #-8]
    1064:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1068:	ebffff0e 	bl	ca8 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    106c:	ebffff21 	bl	cf8 <set_A9_IRQ_stack>
	fix_bug();
    1070:	ebffffeb 	bl	1024 <fix_bug>
	config_GIC(len, IDs);
    1074:	e51b0008 	ldr	r0, [r11, #-8]
    1078:	e51b100c 	ldr	r1, [r11, #-12]
    107c:	ebffff5b 	bl	df0 <config_GIC>
	enable_A9_interrupts();
    1080:	ebffff12 	bl	cd0 <enable_A9_interrupts>
}
    1084:	e24bd004 	sub	sp, r11, #4
    1088:	e8bd8800 	pop	{r11, pc}

0000108c <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
    108c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
    1090:	e3a01000 	mov	r1, #0
	MOV R2, #1
    1094:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
    1098:	e5907000 	ldr	r7, [r0]
	B LOOP
    109c:	eaffffff 	b	10a0 <LOOP>

000010a0 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
    10a0:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
    10a4:	0a000000 	beq	10ac <CONTINUE>
	BL CONFIG
    10a8:	eb000004 	bl	10c0 <CONFIG>

000010ac <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
    10ac:	e2811001 	add	r1, r1, #1
	CMP R1, #4
    10b0:	e3510004 	cmp	r1, #4
	BLT LOOP
    10b4:	bafffff9 	blt	10a0 <LOOP>

000010b8 <DONE>:

DONE:
	POP {R4-R7, LR}
    10b8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
    10bc:	e12fff1e 	bx	lr

000010c0 <CONFIG>:


CONFIG:
	PUSH {LR}
    10c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
    10c4:	e59f3148 	ldr	r3, [pc, #328]	; 1214 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
    10c8:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
    10cc:	eb000005 	bl	10e8 <DISABLE>
	BL SET_LOAD_VAL
    10d0:	eb000008 	bl	10f8 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
    10d4:	eb00000e 	bl	1114 <SET_LOAD_BIT>
	BL SET_INT_BIT
    10d8:	eb000013 	bl	112c <SET_INT_BIT>
	BL SET_EN_BIT
    10dc:	eb000019 	bl	1148 <SET_EN_BIT>
	
	POP {LR}
    10e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
    10e4:	e12fff1e 	bx	lr

000010e8 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
    10e8:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
    10ec:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
    10f0:	e5845008 	str	r5, [r4, #8]
	BX LR
    10f4:	e12fff1e 	bx	lr

000010f8 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
    10f8:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
    10fc:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
    1100:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
    1104:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
    1108:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
    110c:	e5845000 	str	r5, [r4]
	BX LR
    1110:	e12fff1e 	bx	lr

00001114 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
    1114:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
    1118:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
    111c:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
    1120:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
    1124:	e5845008 	str	r5, [r4, #8]
	BX LR
    1128:	e12fff1e 	bx	lr

0000112c <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
    112c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
    1130:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
    1134:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
    1138:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
    113c:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
    1140:	e5845008 	str	r5, [r4, #8]
	BX LR
    1144:	e12fff1e 	bx	lr

00001148 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
    1148:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
    114c:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
    1150:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
    1154:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
    1158:	e5845008 	str	r5, [r4, #8]
	BX LR
    115c:	e12fff1e 	bx	lr

00001160 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
    1160:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
    1164:	e3a01000 	mov	r1, #0
	MOV R2, #1
    1168:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
    116c:	eaffffff 	b	1170 <CLEAR_INT_LOOP>

00001170 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
    1170:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
    1174:	0a000000 	beq	117c <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
    1178:	eb000005 	bl	1194 <CLEAR_INT>

0000117c <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
    117c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
    1180:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
    1184:	bafffff9 	blt	1170 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
    1188:	eaffffff 	b	118c <CLEAR_INT_DONE>

0000118c <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
    118c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
    1190:	e12fff1e 	bx	lr

00001194 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
    1194:	e59f3078 	ldr	r3, [pc, #120]	; 1214 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
    1198:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
    119c:	e593300c 	ldr	r3, [r3, #12]
	BX LR
    11a0:	e12fff1e 	bx	lr

000011a4 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
    11a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
    11a8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
    11ac:	e3a01000 	mov	r1, #0
	MOV R2, #1
    11b0:	e3a02001 	mov	r2, #1
	MOV R4, #0
    11b4:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
    11b8:	eaffffff 	b	11bc <READ_INT_LOOP>

000011bc <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
    11bc:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
    11c0:	0a000000 	beq	11c8 <READ_INT_CONTINUE>
	BL READ_INT
    11c4:	eb000008 	bl	11ec <READ_INT>

000011c8 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
    11c8:	e2811001 	add	r1, r1, #1
	CMP R1, #4
    11cc:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
    11d0:	0a000001 	beq	11dc <READ_INT_DONE>
	LSL R4, R4, #1
    11d4:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
    11d8:	eafffff7 	b	11bc <READ_INT_LOOP>

000011dc <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
    11dc:	e1a00004 	mov	r0, r4
	POP {R4}
    11e0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
    11e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
    11e8:	e12fff1e 	bx	lr

000011ec <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
    11ec:	e59f3020 	ldr	r3, [pc, #32]	; 1214 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
    11f0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
    11f4:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
    11f8:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
    11fc:	e0244003 	eor	r4, r4, r3
	BX LR
    1200:	e12fff1e 	bx	lr

00001204 <HPS_TIM_BASE>:
    1204:	ffc08000 	.word	0xffc08000
    1208:	ffc09000 	.word	0xffc09000
    120c:	ffd00000 	.word	0xffd00000
    1210:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
    1214:	00001204 	.word	0x00001204

00001218 <__aeabi_drsub>:
    1218:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    121c:	ea000000 	b	1224 <__adddf3>

00001220 <__aeabi_dsub>:
    1220:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001224 <__adddf3>:
    1224:	e92d4030 	push	{r4, r5, lr}
    1228:	e1a04081 	lsl	r4, r1, #1
    122c:	e1a05083 	lsl	r5, r3, #1
    1230:	e1340005 	teq	r4, r5
    1234:	01300002 	teqeq	r0, r2
    1238:	1194c000 	orrsne	r12, r4, r0
    123c:	1195c002 	orrsne	r12, r5, r2
    1240:	11f0cac4 	mvnsne	r12, r4, asr #21
    1244:	11f0cac5 	mvnsne	r12, r5, asr #21
    1248:	0a00008c 	beq	1480 <__adddf3+0x25c>
    124c:	e1a04aa4 	lsr	r4, r4, #21
    1250:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1254:	b2655000 	rsblt	r5, r5, #0
    1258:	da000006 	ble	1278 <__adddf3+0x54>
    125c:	e0844005 	add	r4, r4, r5
    1260:	e0202002 	eor	r2, r0, r2
    1264:	e0213003 	eor	r3, r1, r3
    1268:	e0220000 	eor	r0, r2, r0
    126c:	e0231001 	eor	r1, r3, r1
    1270:	e0202002 	eor	r2, r0, r2
    1274:	e0213003 	eor	r3, r1, r3
    1278:	e3550036 	cmp	r5, #54	; 0x36
    127c:	88bd4030 	pophi	{r4, r5, lr}
    1280:	812fff1e 	bxhi	lr
    1284:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1288:	e1a01601 	lsl	r1, r1, #12
    128c:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1290:	e18c1621 	orr	r1, r12, r1, lsr #12
    1294:	0a000001 	beq	12a0 <__adddf3+0x7c>
    1298:	e2700000 	rsbs	r0, r0, #0
    129c:	e2e11000 	rsc	r1, r1, #0
    12a0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    12a4:	e1a03603 	lsl	r3, r3, #12
    12a8:	e18c3623 	orr	r3, r12, r3, lsr #12
    12ac:	0a000001 	beq	12b8 <__adddf3+0x94>
    12b0:	e2722000 	rsbs	r2, r2, #0
    12b4:	e2e33000 	rsc	r3, r3, #0
    12b8:	e1340005 	teq	r4, r5
    12bc:	0a000069 	beq	1468 <__adddf3+0x244>
    12c0:	e2444001 	sub	r4, r4, #1
    12c4:	e275e020 	rsbs	lr, r5, #32
    12c8:	ba000005 	blt	12e4 <__adddf3+0xc0>
    12cc:	e1a0ce12 	lsl	r12, r2, lr
    12d0:	e0900532 	adds	r0, r0, r2, lsr r5
    12d4:	e2a11000 	adc	r1, r1, #0
    12d8:	e0900e13 	adds	r0, r0, r3, lsl lr
    12dc:	e0b11553 	adcs	r1, r1, r3, asr r5
    12e0:	ea000006 	b	1300 <__adddf3+0xdc>
    12e4:	e2455020 	sub	r5, r5, #32
    12e8:	e28ee020 	add	lr, lr, #32
    12ec:	e3520001 	cmp	r2, #1
    12f0:	e1a0ce13 	lsl	r12, r3, lr
    12f4:	238cc002 	orrcs	r12, r12, #2
    12f8:	e0900553 	adds	r0, r0, r3, asr r5
    12fc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1300:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1304:	5a000002 	bpl	1314 <__adddf3+0xf0>
    1308:	e27cc000 	rsbs	r12, r12, #0
    130c:	e2f00000 	rscs	r0, r0, #0
    1310:	e2e11000 	rsc	r1, r1, #0
    1314:	e3510601 	cmp	r1, #1048576	; 0x100000
    1318:	3a00000f 	bcc	135c <__adddf3+0x138>
    131c:	e3510602 	cmp	r1, #2097152	; 0x200000
    1320:	3a000006 	bcc	1340 <__adddf3+0x11c>
    1324:	e1b010a1 	lsrs	r1, r1, #1
    1328:	e1b00060 	rrxs	r0, r0
    132c:	e1a0c06c 	rrx	r12, r12
    1330:	e2844001 	add	r4, r4, #1
    1334:	e1a02a84 	lsl	r2, r4, #21
    1338:	e3720501 	cmn	r2, #4194304	; 0x400000
    133c:	2a00006b 	bcs	14f0 <__adddf3+0x2cc>
    1340:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1344:	01b0c0a0 	lsrseq	r12, r0, #1
    1348:	e2b00000 	adcs	r0, r0, #0
    134c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1350:	e1811005 	orr	r1, r1, r5
    1354:	e8bd4030 	pop	{r4, r5, lr}
    1358:	e12fff1e 	bx	lr
    135c:	e1b0c08c 	lsls	r12, r12, #1
    1360:	e0b00000 	adcs	r0, r0, r0
    1364:	e0a11001 	adc	r1, r1, r1
    1368:	e3110601 	tst	r1, #1048576	; 0x100000
    136c:	e2444001 	sub	r4, r4, #1
    1370:	1afffff2 	bne	1340 <__adddf3+0x11c>
    1374:	e3310000 	teq	r1, #0
    1378:	13a03014 	movne	r3, #20
    137c:	03a03034 	moveq	r3, #52	; 0x34
    1380:	01a01000 	moveq	r1, r0
    1384:	03a00000 	moveq	r0, #0
    1388:	e1a02001 	mov	r2, r1
    138c:	e3520801 	cmp	r2, #65536	; 0x10000
    1390:	21a02822 	lsrcs	r2, r2, #16
    1394:	22433010 	subcs	r3, r3, #16
    1398:	e3520c01 	cmp	r2, #256	; 0x100
    139c:	21a02422 	lsrcs	r2, r2, #8
    13a0:	22433008 	subcs	r3, r3, #8
    13a4:	e3520010 	cmp	r2, #16
    13a8:	21a02222 	lsrcs	r2, r2, #4
    13ac:	22433004 	subcs	r3, r3, #4
    13b0:	e3520004 	cmp	r2, #4
    13b4:	22433002 	subcs	r3, r3, #2
    13b8:	304330a2 	subcc	r3, r3, r2, lsr #1
    13bc:	e04331a2 	sub	r3, r3, r2, lsr #3
    13c0:	e2532020 	subs	r2, r3, #32
    13c4:	aa000007 	bge	13e8 <__adddf3+0x1c4>
    13c8:	e292200c 	adds	r2, r2, #12
    13cc:	da000004 	ble	13e4 <__adddf3+0x1c0>
    13d0:	e282c014 	add	r12, r2, #20
    13d4:	e262200c 	rsb	r2, r2, #12
    13d8:	e1a00c11 	lsl	r0, r1, r12
    13dc:	e1a01231 	lsr	r1, r1, r2
    13e0:	ea000004 	b	13f8 <__adddf3+0x1d4>
    13e4:	e2822014 	add	r2, r2, #20
    13e8:	d262c020 	rsble	r12, r2, #32
    13ec:	e1a01211 	lsl	r1, r1, r2
    13f0:	d1811c30 	orrle	r1, r1, r0, lsr r12
    13f4:	d1a00210 	lslle	r0, r0, r2
    13f8:	e0544003 	subs	r4, r4, r3
    13fc:	a0811a04 	addge	r1, r1, r4, lsl #20
    1400:	a1811005 	orrge	r1, r1, r5
    1404:	a8bd4030 	popge	{r4, r5, lr}
    1408:	a12fff1e 	bxge	lr
    140c:	e1e04004 	mvn	r4, r4
    1410:	e254401f 	subs	r4, r4, #31
    1414:	aa00000f 	bge	1458 <__adddf3+0x234>
    1418:	e294400c 	adds	r4, r4, #12
    141c:	ca000006 	bgt	143c <__adddf3+0x218>
    1420:	e2844014 	add	r4, r4, #20
    1424:	e2642020 	rsb	r2, r4, #32
    1428:	e1a00430 	lsr	r0, r0, r4
    142c:	e1800211 	orr	r0, r0, r1, lsl r2
    1430:	e1851431 	orr	r1, r5, r1, lsr r4
    1434:	e8bd4030 	pop	{r4, r5, lr}
    1438:	e12fff1e 	bx	lr
    143c:	e264400c 	rsb	r4, r4, #12
    1440:	e2642020 	rsb	r2, r4, #32
    1444:	e1a00230 	lsr	r0, r0, r2
    1448:	e1800411 	orr	r0, r0, r1, lsl r4
    144c:	e1a01005 	mov	r1, r5
    1450:	e8bd4030 	pop	{r4, r5, lr}
    1454:	e12fff1e 	bx	lr
    1458:	e1a00431 	lsr	r0, r1, r4
    145c:	e1a01005 	mov	r1, r5
    1460:	e8bd4030 	pop	{r4, r5, lr}
    1464:	e12fff1e 	bx	lr
    1468:	e3340000 	teq	r4, #0
    146c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1470:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1474:	02844001 	addeq	r4, r4, #1
    1478:	12455001 	subne	r5, r5, #1
    147c:	eaffff8f 	b	12c0 <__adddf3+0x9c>
    1480:	e1f0cac4 	mvns	r12, r4, asr #21
    1484:	11f0cac5 	mvnsne	r12, r5, asr #21
    1488:	0a00001d 	beq	1504 <__adddf3+0x2e0>
    148c:	e1340005 	teq	r4, r5
    1490:	01300002 	teqeq	r0, r2
    1494:	0a000004 	beq	14ac <__adddf3+0x288>
    1498:	e194c000 	orrs	r12, r4, r0
    149c:	01a01003 	moveq	r1, r3
    14a0:	01a00002 	moveq	r0, r2
    14a4:	e8bd4030 	pop	{r4, r5, lr}
    14a8:	e12fff1e 	bx	lr
    14ac:	e1310003 	teq	r1, r3
    14b0:	13a01000 	movne	r1, #0
    14b4:	13a00000 	movne	r0, #0
    14b8:	18bd4030 	popne	{r4, r5, lr}
    14bc:	112fff1e 	bxne	lr
    14c0:	e1b0caa4 	lsrs	r12, r4, #21
    14c4:	1a000004 	bne	14dc <__adddf3+0x2b8>
    14c8:	e1b00080 	lsls	r0, r0, #1
    14cc:	e0b11001 	adcs	r1, r1, r1
    14d0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    14d4:	e8bd4030 	pop	{r4, r5, lr}
    14d8:	e12fff1e 	bx	lr
    14dc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    14e0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    14e4:	38bd4030 	popcc	{r4, r5, lr}
    14e8:	312fff1e 	bxcc	lr
    14ec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    14f0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    14f4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    14f8:	e3a00000 	mov	r0, #0
    14fc:	e8bd4030 	pop	{r4, r5, lr}
    1500:	e12fff1e 	bx	lr
    1504:	e1f0cac4 	mvns	r12, r4, asr #21
    1508:	11a01003 	movne	r1, r3
    150c:	11a00002 	movne	r0, r2
    1510:	01f0cac5 	mvnseq	r12, r5, asr #21
    1514:	11a03001 	movne	r3, r1
    1518:	11a02000 	movne	r2, r0
    151c:	e1904601 	orrs	r4, r0, r1, lsl #12
    1520:	01925603 	orrseq	r5, r2, r3, lsl #12
    1524:	01310003 	teqeq	r1, r3
    1528:	13811702 	orrne	r1, r1, #524288	; 0x80000
    152c:	e8bd4030 	pop	{r4, r5, lr}
    1530:	e12fff1e 	bx	lr

00001534 <__aeabi_ui2d>:
    1534:	e3300000 	teq	r0, #0
    1538:	03a01000 	moveq	r1, #0
    153c:	012fff1e 	bxeq	lr
    1540:	e92d4030 	push	{r4, r5, lr}
    1544:	e3a04b01 	mov	r4, #1024	; 0x400
    1548:	e2844032 	add	r4, r4, #50	; 0x32
    154c:	e3a05000 	mov	r5, #0
    1550:	e3a01000 	mov	r1, #0
    1554:	eaffff86 	b	1374 <__adddf3+0x150>

00001558 <__aeabi_i2d>:
    1558:	e3300000 	teq	r0, #0
    155c:	03a01000 	moveq	r1, #0
    1560:	012fff1e 	bxeq	lr
    1564:	e92d4030 	push	{r4, r5, lr}
    1568:	e3a04b01 	mov	r4, #1024	; 0x400
    156c:	e2844032 	add	r4, r4, #50	; 0x32
    1570:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1574:	42600000 	rsbmi	r0, r0, #0
    1578:	e3a01000 	mov	r1, #0
    157c:	eaffff7c 	b	1374 <__adddf3+0x150>

00001580 <__aeabi_f2d>:
    1580:	e1b02080 	lsls	r2, r0, #1
    1584:	e1a011c2 	asr	r1, r2, #3
    1588:	e1a01061 	rrx	r1, r1
    158c:	e1a00e02 	lsl	r0, r2, #28
    1590:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1594:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1598:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    159c:	112fff1e 	bxne	lr
    15a0:	e3320000 	teq	r2, #0
    15a4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    15a8:	012fff1e 	bxeq	lr
    15ac:	e92d4030 	push	{r4, r5, lr}
    15b0:	e3a04d0e 	mov	r4, #896	; 0x380
    15b4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    15b8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    15bc:	eaffff6c 	b	1374 <__adddf3+0x150>

000015c0 <__aeabi_ul2d>:
    15c0:	e1902001 	orrs	r2, r0, r1
    15c4:	012fff1e 	bxeq	lr
    15c8:	e92d4030 	push	{r4, r5, lr}
    15cc:	e3a05000 	mov	r5, #0
    15d0:	ea000006 	b	15f0 <__aeabi_l2d+0x1c>

000015d4 <__aeabi_l2d>:
    15d4:	e1902001 	orrs	r2, r0, r1
    15d8:	012fff1e 	bxeq	lr
    15dc:	e92d4030 	push	{r4, r5, lr}
    15e0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    15e4:	5a000001 	bpl	15f0 <__aeabi_l2d+0x1c>
    15e8:	e2700000 	rsbs	r0, r0, #0
    15ec:	e2e11000 	rsc	r1, r1, #0
    15f0:	e3a04b01 	mov	r4, #1024	; 0x400
    15f4:	e2844032 	add	r4, r4, #50	; 0x32
    15f8:	e1b0cb21 	lsrs	r12, r1, #22
    15fc:	0affff44 	beq	1314 <__adddf3+0xf0>
    1600:	e3a02003 	mov	r2, #3
    1604:	e1b0c1ac 	lsrs	r12, r12, #3
    1608:	12822003 	addne	r2, r2, #3
    160c:	e1b0c1ac 	lsrs	r12, r12, #3
    1610:	12822003 	addne	r2, r2, #3
    1614:	e08221ac 	add	r2, r2, r12, lsr #3
    1618:	e2623020 	rsb	r3, r2, #32
    161c:	e1a0c310 	lsl	r12, r0, r3
    1620:	e1a00230 	lsr	r0, r0, r2
    1624:	e1800311 	orr	r0, r0, r1, lsl r3
    1628:	e1a01231 	lsr	r1, r1, r2
    162c:	e0844002 	add	r4, r4, r2
    1630:	eaffff37 	b	1314 <__adddf3+0xf0>

00001634 <__aeabi_dmul>:
    1634:	e92d4070 	push	{r4, r5, r6, lr}
    1638:	e3a0c0ff 	mov	r12, #255	; 0xff
    163c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1640:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1644:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1648:	1134000c 	teqne	r4, r12
    164c:	1135000c 	teqne	r5, r12
    1650:	0b000075 	bleq	182c <__aeabi_dmul+0x1f8>
    1654:	e0844005 	add	r4, r4, r5
    1658:	e0216003 	eor	r6, r1, r3
    165c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1660:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1664:	e1905601 	orrs	r5, r0, r1, lsl #12
    1668:	11925603 	orrsne	r5, r2, r3, lsl #12
    166c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1670:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1674:	0a00001d 	beq	16f0 <__aeabi_dmul+0xbc>
    1678:	e08ec290 	umull	r12, lr, r0, r2
    167c:	e3a05000 	mov	r5, #0
    1680:	e0a5e291 	umlal	lr, r5, r1, r2
    1684:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1688:	e0a5e390 	umlal	lr, r5, r0, r3
    168c:	e3a06000 	mov	r6, #0
    1690:	e0a65391 	umlal	r5, r6, r1, r3
    1694:	e33c0000 	teq	r12, #0
    1698:	138ee001 	orrne	lr, lr, #1
    169c:	e24440ff 	sub	r4, r4, #255	; 0xff
    16a0:	e3560c02 	cmp	r6, #512	; 0x200
    16a4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    16a8:	2a000002 	bcs	16b8 <__aeabi_dmul+0x84>
    16ac:	e1b0e08e 	lsls	lr, lr, #1
    16b0:	e0b55005 	adcs	r5, r5, r5
    16b4:	e0a66006 	adc	r6, r6, r6
    16b8:	e1821586 	orr	r1, r2, r6, lsl #11
    16bc:	e1811aa5 	orr	r1, r1, r5, lsr #21
    16c0:	e1a00585 	lsl	r0, r5, #11
    16c4:	e1800aae 	orr	r0, r0, lr, lsr #21
    16c8:	e1a0e58e 	lsl	lr, lr, #11
    16cc:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    16d0:	835c0c07 	cmphi	r12, #1792	; 0x700
    16d4:	8a000011 	bhi	1720 <__aeabi_dmul+0xec>
    16d8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    16dc:	01b0e0a0 	lsrseq	lr, r0, #1
    16e0:	e2b00000 	adcs	r0, r0, #0
    16e4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    16e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    16ec:	e12fff1e 	bx	lr
    16f0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    16f4:	e1861001 	orr	r1, r6, r1
    16f8:	e1800002 	orr	r0, r0, r2
    16fc:	e0211003 	eor	r1, r1, r3
    1700:	e05440ac 	subs	r4, r4, r12, lsr #1
    1704:	c074500c 	rsbsgt	r5, r4, r12
    1708:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    170c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1710:	c12fff1e 	bxgt	lr
    1714:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1718:	e3a0e000 	mov	lr, #0
    171c:	e2544001 	subs	r4, r4, #1
    1720:	ca00005d 	bgt	189c <__aeabi_dmul+0x268>
    1724:	e3740036 	cmn	r4, #54	; 0x36
    1728:	d3a00000 	movle	r0, #0
    172c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1730:	d8bd4070 	pople	{r4, r5, r6, lr}
    1734:	d12fff1e 	bxle	lr
    1738:	e2644000 	rsb	r4, r4, #0
    173c:	e2544020 	subs	r4, r4, #32
    1740:	aa00001a 	bge	17b0 <__aeabi_dmul+0x17c>
    1744:	e294400c 	adds	r4, r4, #12
    1748:	ca00000c 	bgt	1780 <__aeabi_dmul+0x14c>
    174c:	e2844014 	add	r4, r4, #20
    1750:	e2645020 	rsb	r5, r4, #32
    1754:	e1a03510 	lsl	r3, r0, r5
    1758:	e1a00430 	lsr	r0, r0, r4
    175c:	e1800511 	orr	r0, r0, r1, lsl r5
    1760:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1764:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1768:	e0900fa3 	adds	r0, r0, r3, lsr #31
    176c:	e0a21431 	adc	r1, r2, r1, lsr r4
    1770:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1774:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1778:	e8bd4070 	pop	{r4, r5, r6, lr}
    177c:	e12fff1e 	bx	lr
    1780:	e264400c 	rsb	r4, r4, #12
    1784:	e2645020 	rsb	r5, r4, #32
    1788:	e1a03410 	lsl	r3, r0, r4
    178c:	e1a00530 	lsr	r0, r0, r5
    1790:	e1800411 	orr	r0, r0, r1, lsl r4
    1794:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1798:	e0900fa3 	adds	r0, r0, r3, lsr #31
    179c:	e2a11000 	adc	r1, r1, #0
    17a0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    17a4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    17a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    17ac:	e12fff1e 	bx	lr
    17b0:	e2645020 	rsb	r5, r4, #32
    17b4:	e18ee510 	orr	lr, lr, r0, lsl r5
    17b8:	e1a03430 	lsr	r3, r0, r4
    17bc:	e1833511 	orr	r3, r3, r1, lsl r5
    17c0:	e1a00431 	lsr	r0, r1, r4
    17c4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    17c8:	e1c00431 	bic	r0, r0, r1, lsr r4
    17cc:	e0800fa3 	add	r0, r0, r3, lsr #31
    17d0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    17d4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    17d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    17dc:	e12fff1e 	bx	lr
    17e0:	e3340000 	teq	r4, #0
    17e4:	1a000008 	bne	180c <__aeabi_dmul+0x1d8>
    17e8:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    17ec:	e1b00080 	lsls	r0, r0, #1
    17f0:	e0a11001 	adc	r1, r1, r1
    17f4:	e3110601 	tst	r1, #1048576	; 0x100000
    17f8:	02444001 	subeq	r4, r4, #1
    17fc:	0afffffa 	beq	17ec <__aeabi_dmul+0x1b8>
    1800:	e1811006 	orr	r1, r1, r6
    1804:	e3350000 	teq	r5, #0
    1808:	112fff1e 	bxne	lr
    180c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1810:	e1b02082 	lsls	r2, r2, #1
    1814:	e0a33003 	adc	r3, r3, r3
    1818:	e3130601 	tst	r3, #1048576	; 0x100000
    181c:	02455001 	subeq	r5, r5, #1
    1820:	0afffffa 	beq	1810 <__aeabi_dmul+0x1dc>
    1824:	e1833006 	orr	r3, r3, r6
    1828:	e12fff1e 	bx	lr
    182c:	e134000c 	teq	r4, r12
    1830:	e00c5a23 	and	r5, r12, r3, lsr #20
    1834:	1135000c 	teqne	r5, r12
    1838:	0a000007 	beq	185c <__aeabi_dmul+0x228>
    183c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1840:	11926083 	orrsne	r6, r2, r3, lsl #1
    1844:	1affffe5 	bne	17e0 <__aeabi_dmul+0x1ac>
    1848:	e0211003 	eor	r1, r1, r3
    184c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1850:	e3a00000 	mov	r0, #0
    1854:	e8bd4070 	pop	{r4, r5, r6, lr}
    1858:	e12fff1e 	bx	lr
    185c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1860:	01a00002 	moveq	r0, r2
    1864:	01a01003 	moveq	r1, r3
    1868:	11926083 	orrsne	r6, r2, r3, lsl #1
    186c:	0a000010 	beq	18b4 <__aeabi_dmul+0x280>
    1870:	e134000c 	teq	r4, r12
    1874:	1a000001 	bne	1880 <__aeabi_dmul+0x24c>
    1878:	e1906601 	orrs	r6, r0, r1, lsl #12
    187c:	1a00000c 	bne	18b4 <__aeabi_dmul+0x280>
    1880:	e135000c 	teq	r5, r12
    1884:	1a000003 	bne	1898 <__aeabi_dmul+0x264>
    1888:	e1926603 	orrs	r6, r2, r3, lsl #12
    188c:	11a00002 	movne	r0, r2
    1890:	11a01003 	movne	r1, r3
    1894:	1a000006 	bne	18b4 <__aeabi_dmul+0x280>
    1898:	e0211003 	eor	r1, r1, r3
    189c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    18a0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    18a4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    18a8:	e3a00000 	mov	r0, #0
    18ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    18b0:	e12fff1e 	bx	lr
    18b4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    18b8:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    18bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    18c0:	e12fff1e 	bx	lr

000018c4 <__aeabi_ddiv>:
    18c4:	e92d4070 	push	{r4, r5, r6, lr}
    18c8:	e3a0c0ff 	mov	r12, #255	; 0xff
    18cc:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    18d0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    18d4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    18d8:	1134000c 	teqne	r4, r12
    18dc:	1135000c 	teqne	r5, r12
    18e0:	0b00005e 	bleq	1a60 <__aeabi_ddiv+0x19c>
    18e4:	e0444005 	sub	r4, r4, r5
    18e8:	e021e003 	eor	lr, r1, r3
    18ec:	e1925603 	orrs	r5, r2, r3, lsl #12
    18f0:	e1a01601 	lsl	r1, r1, #12
    18f4:	0a00004c 	beq	1a2c <__aeabi_ddiv+0x168>
    18f8:	e1a03603 	lsl	r3, r3, #12
    18fc:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1900:	e1853223 	orr	r3, r5, r3, lsr #4
    1904:	e1833c22 	orr	r3, r3, r2, lsr #24
    1908:	e1a02402 	lsl	r2, r2, #8
    190c:	e1855221 	orr	r5, r5, r1, lsr #4
    1910:	e1855c20 	orr	r5, r5, r0, lsr #24
    1914:	e1a06400 	lsl	r6, r0, #8
    1918:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    191c:	e1550003 	cmp	r5, r3
    1920:	01560002 	cmpeq	r6, r2
    1924:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1928:	e2844c03 	add	r4, r4, #768	; 0x300
    192c:	2a000001 	bcs	1938 <__aeabi_ddiv+0x74>
    1930:	e1b030a3 	lsrs	r3, r3, #1
    1934:	e1a02062 	rrx	r2, r2
    1938:	e0566002 	subs	r6, r6, r2
    193c:	e0c55003 	sbc	r5, r5, r3
    1940:	e1b030a3 	lsrs	r3, r3, #1
    1944:	e1a02062 	rrx	r2, r2
    1948:	e3a00601 	mov	r0, #1048576	; 0x100000
    194c:	e3a0c702 	mov	r12, #524288	; 0x80000
    1950:	e056e002 	subs	lr, r6, r2
    1954:	e0d5e003 	sbcs	lr, r5, r3
    1958:	20466002 	subcs	r6, r6, r2
    195c:	21a0500e 	movcs	r5, lr
    1960:	2180000c 	orrcs	r0, r0, r12
    1964:	e1b030a3 	lsrs	r3, r3, #1
    1968:	e1a02062 	rrx	r2, r2
    196c:	e056e002 	subs	lr, r6, r2
    1970:	e0d5e003 	sbcs	lr, r5, r3
    1974:	20466002 	subcs	r6, r6, r2
    1978:	21a0500e 	movcs	r5, lr
    197c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1980:	e1b030a3 	lsrs	r3, r3, #1
    1984:	e1a02062 	rrx	r2, r2
    1988:	e056e002 	subs	lr, r6, r2
    198c:	e0d5e003 	sbcs	lr, r5, r3
    1990:	20466002 	subcs	r6, r6, r2
    1994:	21a0500e 	movcs	r5, lr
    1998:	2180012c 	orrcs	r0, r0, r12, lsr #2
    199c:	e1b030a3 	lsrs	r3, r3, #1
    19a0:	e1a02062 	rrx	r2, r2
    19a4:	e056e002 	subs	lr, r6, r2
    19a8:	e0d5e003 	sbcs	lr, r5, r3
    19ac:	20466002 	subcs	r6, r6, r2
    19b0:	21a0500e 	movcs	r5, lr
    19b4:	218001ac 	orrcs	r0, r0, r12, lsr #3
    19b8:	e195e006 	orrs	lr, r5, r6
    19bc:	0a00000d 	beq	19f8 <__aeabi_ddiv+0x134>
    19c0:	e1a05205 	lsl	r5, r5, #4
    19c4:	e1855e26 	orr	r5, r5, r6, lsr #28
    19c8:	e1a06206 	lsl	r6, r6, #4
    19cc:	e1a03183 	lsl	r3, r3, #3
    19d0:	e1833ea2 	orr	r3, r3, r2, lsr #29
    19d4:	e1a02182 	lsl	r2, r2, #3
    19d8:	e1b0c22c 	lsrs	r12, r12, #4
    19dc:	1affffdb 	bne	1950 <__aeabi_ddiv+0x8c>
    19e0:	e3110601 	tst	r1, #1048576	; 0x100000
    19e4:	1a000006 	bne	1a04 <__aeabi_ddiv+0x140>
    19e8:	e1811000 	orr	r1, r1, r0
    19ec:	e3a00000 	mov	r0, #0
    19f0:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    19f4:	eaffffd5 	b	1950 <__aeabi_ddiv+0x8c>
    19f8:	e3110601 	tst	r1, #1048576	; 0x100000
    19fc:	01811000 	orreq	r1, r1, r0
    1a00:	03a00000 	moveq	r0, #0
    1a04:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1a08:	835c0c07 	cmphi	r12, #1792	; 0x700
    1a0c:	8affff43 	bhi	1720 <__aeabi_dmul+0xec>
    1a10:	e055c003 	subs	r12, r5, r3
    1a14:	0056c002 	subseq	r12, r6, r2
    1a18:	01b0c0a0 	lsrseq	r12, r0, #1
    1a1c:	e2b00000 	adcs	r0, r0, #0
    1a20:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1a24:	e8bd4070 	pop	{r4, r5, r6, lr}
    1a28:	e12fff1e 	bx	lr
    1a2c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1a30:	e18e1621 	orr	r1, lr, r1, lsr #12
    1a34:	e09440ac 	adds	r4, r4, r12, lsr #1
    1a38:	c074500c 	rsbsgt	r5, r4, r12
    1a3c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1a40:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1a44:	c12fff1e 	bxgt	lr
    1a48:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1a4c:	e3a0e000 	mov	lr, #0
    1a50:	e2544001 	subs	r4, r4, #1
    1a54:	eaffff31 	b	1720 <__aeabi_dmul+0xec>
    1a58:	e185e006 	orr	lr, r5, r6
    1a5c:	eaffff2f 	b	1720 <__aeabi_dmul+0xec>
    1a60:	e00c5a23 	and	r5, r12, r3, lsr #20
    1a64:	e134000c 	teq	r4, r12
    1a68:	0135000c 	teqeq	r5, r12
    1a6c:	0affff90 	beq	18b4 <__aeabi_dmul+0x280>
    1a70:	e134000c 	teq	r4, r12
    1a74:	1a000006 	bne	1a94 <__aeabi_ddiv+0x1d0>
    1a78:	e1904601 	orrs	r4, r0, r1, lsl #12
    1a7c:	1affff8c 	bne	18b4 <__aeabi_dmul+0x280>
    1a80:	e135000c 	teq	r5, r12
    1a84:	1affff83 	bne	1898 <__aeabi_dmul+0x264>
    1a88:	e1a00002 	mov	r0, r2
    1a8c:	e1a01003 	mov	r1, r3
    1a90:	eaffff87 	b	18b4 <__aeabi_dmul+0x280>
    1a94:	e135000c 	teq	r5, r12
    1a98:	1a000004 	bne	1ab0 <__aeabi_ddiv+0x1ec>
    1a9c:	e1925603 	orrs	r5, r2, r3, lsl #12
    1aa0:	0affff68 	beq	1848 <__aeabi_dmul+0x214>
    1aa4:	e1a00002 	mov	r0, r2
    1aa8:	e1a01003 	mov	r1, r3
    1aac:	eaffff80 	b	18b4 <__aeabi_dmul+0x280>
    1ab0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1ab4:	11926083 	orrsne	r6, r2, r3, lsl #1
    1ab8:	1affff48 	bne	17e0 <__aeabi_dmul+0x1ac>
    1abc:	e1904081 	orrs	r4, r0, r1, lsl #1
    1ac0:	1affff74 	bne	1898 <__aeabi_dmul+0x264>
    1ac4:	e1925083 	orrs	r5, r2, r3, lsl #1
    1ac8:	1affff5e 	bne	1848 <__aeabi_dmul+0x214>
    1acc:	eaffff78 	b	18b4 <__aeabi_dmul+0x280>

00001ad0 <__aeabi_d2iz>:
    1ad0:	e1a02081 	lsl	r2, r1, #1
    1ad4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1ad8:	2a00000c 	bcs	1b10 <__aeabi_d2iz+0x40>
    1adc:	5a000009 	bpl	1b08 <__aeabi_d2iz+0x38>
    1ae0:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1ae4:	e0532ac2 	subs	r2, r3, r2, asr #21
    1ae8:	9a00000a 	bls	1b18 <__aeabi_d2iz+0x48>
    1aec:	e1a03581 	lsl	r3, r1, #11
    1af0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1af4:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1af8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1afc:	e1a00233 	lsr	r0, r3, r2
    1b00:	12600000 	rsbne	r0, r0, #0
    1b04:	e12fff1e 	bx	lr
    1b08:	e3a00000 	mov	r0, #0
    1b0c:	e12fff1e 	bx	lr
    1b10:	e1900601 	orrs	r0, r0, r1, lsl #12
    1b14:	1a000002 	bne	1b24 <__aeabi_d2iz+0x54>
    1b18:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1b1c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1b20:	e12fff1e 	bx	lr
    1b24:	e3a00000 	mov	r0, #0
    1b28:	e12fff1e 	bx	lr

00001b2c <__aeabi_frsub>:
    1b2c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    1b30:	ea000000 	b	1b38 <__addsf3>

00001b34 <__aeabi_fsub>:
    1b34:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00001b38 <__addsf3>:
    1b38:	e1b02080 	lsls	r2, r0, #1
    1b3c:	11b03081 	lslsne	r3, r1, #1
    1b40:	11320003 	teqne	r2, r3
    1b44:	11f0cc42 	mvnsne	r12, r2, asr #24
    1b48:	11f0cc43 	mvnsne	r12, r3, asr #24
    1b4c:	0a000047 	beq	1c70 <__addsf3+0x138>
    1b50:	e1a02c22 	lsr	r2, r2, #24
    1b54:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    1b58:	c0822003 	addgt	r2, r2, r3
    1b5c:	c0201001 	eorgt	r1, r0, r1
    1b60:	c0210000 	eorgt	r0, r1, r0
    1b64:	c0201001 	eorgt	r1, r0, r1
    1b68:	b2633000 	rsblt	r3, r3, #0
    1b6c:	e3530019 	cmp	r3, #25
    1b70:	812fff1e 	bxhi	lr
    1b74:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1b78:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1b7c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    1b80:	12600000 	rsbne	r0, r0, #0
    1b84:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1b88:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    1b8c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    1b90:	12611000 	rsbne	r1, r1, #0
    1b94:	e1320003 	teq	r2, r3
    1b98:	0a00002e 	beq	1c58 <__addsf3+0x120>
    1b9c:	e2422001 	sub	r2, r2, #1
    1ba0:	e0900351 	adds	r0, r0, r1, asr r3
    1ba4:	e2633020 	rsb	r3, r3, #32
    1ba8:	e1a01311 	lsl	r1, r1, r3
    1bac:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1bb0:	5a000001 	bpl	1bbc <__addsf3+0x84>
    1bb4:	e2711000 	rsbs	r1, r1, #0
    1bb8:	e2e00000 	rsc	r0, r0, #0
    1bbc:	e3500502 	cmp	r0, #8388608	; 0x800000
    1bc0:	3a00000b 	bcc	1bf4 <__addsf3+0xbc>
    1bc4:	e3500401 	cmp	r0, #16777216	; 0x1000000
    1bc8:	3a000004 	bcc	1be0 <__addsf3+0xa8>
    1bcc:	e1b000a0 	lsrs	r0, r0, #1
    1bd0:	e1a01061 	rrx	r1, r1
    1bd4:	e2822001 	add	r2, r2, #1
    1bd8:	e35200fe 	cmp	r2, #254	; 0xfe
    1bdc:	2a000038 	bcs	1cc4 <__addsf3+0x18c>
    1be0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1be4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1be8:	03c00001 	biceq	r0, r0, #1
    1bec:	e1800003 	orr	r0, r0, r3
    1bf0:	e12fff1e 	bx	lr
    1bf4:	e1b01081 	lsls	r1, r1, #1
    1bf8:	e0a00000 	adc	r0, r0, r0
    1bfc:	e3100502 	tst	r0, #8388608	; 0x800000
    1c00:	e2422001 	sub	r2, r2, #1
    1c04:	1afffff5 	bne	1be0 <__addsf3+0xa8>
    1c08:	e1b0c620 	lsrs	r12, r0, #12
    1c0c:	01a00600 	lsleq	r0, r0, #12
    1c10:	0242200c 	subeq	r2, r2, #12
    1c14:	e31008ff 	tst	r0, #16711680	; 0xff0000
    1c18:	01a00400 	lsleq	r0, r0, #8
    1c1c:	02422008 	subeq	r2, r2, #8
    1c20:	e310060f 	tst	r0, #15728640	; 0xf00000
    1c24:	01a00200 	lsleq	r0, r0, #4
    1c28:	02422004 	subeq	r2, r2, #4
    1c2c:	e3100503 	tst	r0, #12582912	; 0xc00000
    1c30:	01a00100 	lsleq	r0, r0, #2
    1c34:	02422002 	subeq	r2, r2, #2
    1c38:	e3500502 	cmp	r0, #8388608	; 0x800000
    1c3c:	31a00080 	lslcc	r0, r0, #1
    1c40:	e2d22000 	sbcs	r2, r2, #0
    1c44:	a0800b82 	addge	r0, r0, r2, lsl #23
    1c48:	b2622000 	rsblt	r2, r2, #0
    1c4c:	a1800003 	orrge	r0, r0, r3
    1c50:	b1830230 	orrlt	r0, r3, r0, lsr r2
    1c54:	e12fff1e 	bx	lr
    1c58:	e3320000 	teq	r2, #0
    1c5c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    1c60:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    1c64:	02822001 	addeq	r2, r2, #1
    1c68:	12433001 	subne	r3, r3, #1
    1c6c:	eaffffca 	b	1b9c <__addsf3+0x64>
    1c70:	e1a03081 	lsl	r3, r1, #1
    1c74:	e1f0cc42 	mvns	r12, r2, asr #24
    1c78:	11f0cc43 	mvnsne	r12, r3, asr #24
    1c7c:	0a000013 	beq	1cd0 <__addsf3+0x198>
    1c80:	e1320003 	teq	r2, r3
    1c84:	0a000002 	beq	1c94 <__addsf3+0x15c>
    1c88:	e3320000 	teq	r2, #0
    1c8c:	01a00001 	moveq	r0, r1
    1c90:	e12fff1e 	bx	lr
    1c94:	e1300001 	teq	r0, r1
    1c98:	13a00000 	movne	r0, #0
    1c9c:	112fff1e 	bxne	lr
    1ca0:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    1ca4:	1a000002 	bne	1cb4 <__addsf3+0x17c>
    1ca8:	e1b00080 	lsls	r0, r0, #1
    1cac:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    1cb0:	e12fff1e 	bx	lr
    1cb4:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    1cb8:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    1cbc:	312fff1e 	bxcc	lr
    1cc0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1cc4:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    1cc8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1ccc:	e12fff1e 	bx	lr
    1cd0:	e1f02c42 	mvns	r2, r2, asr #24
    1cd4:	11a00001 	movne	r0, r1
    1cd8:	01f03c43 	mvnseq	r3, r3, asr #24
    1cdc:	11a01000 	movne	r1, r0
    1ce0:	e1b02480 	lsls	r2, r0, #9
    1ce4:	01b03481 	lslseq	r3, r1, #9
    1ce8:	01300001 	teqeq	r0, r1
    1cec:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    1cf0:	e12fff1e 	bx	lr

00001cf4 <__aeabi_ui2f>:
    1cf4:	e3a03000 	mov	r3, #0
    1cf8:	ea000001 	b	1d04 <__aeabi_i2f+0x8>

00001cfc <__aeabi_i2f>:
    1cfc:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    1d00:	42600000 	rsbmi	r0, r0, #0
    1d04:	e1b0c000 	movs	r12, r0
    1d08:	012fff1e 	bxeq	lr
    1d0c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    1d10:	e1a01000 	mov	r1, r0
    1d14:	e3a00000 	mov	r0, #0
    1d18:	ea00000f 	b	1d5c <__aeabi_l2f+0x30>

00001d1c <__aeabi_ul2f>:
    1d1c:	e1902001 	orrs	r2, r0, r1
    1d20:	012fff1e 	bxeq	lr
    1d24:	e3a03000 	mov	r3, #0
    1d28:	ea000005 	b	1d44 <__aeabi_l2f+0x18>

00001d2c <__aeabi_l2f>:
    1d2c:	e1902001 	orrs	r2, r0, r1
    1d30:	012fff1e 	bxeq	lr
    1d34:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    1d38:	5a000001 	bpl	1d44 <__aeabi_l2f+0x18>
    1d3c:	e2700000 	rsbs	r0, r0, #0
    1d40:	e2e11000 	rsc	r1, r1, #0
    1d44:	e1b0c001 	movs	r12, r1
    1d48:	01a0c000 	moveq	r12, r0
    1d4c:	01a01000 	moveq	r1, r0
    1d50:	03a00000 	moveq	r0, #0
    1d54:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    1d58:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    1d5c:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    1d60:	e3a02017 	mov	r2, #23
    1d64:	e35c0801 	cmp	r12, #65536	; 0x10000
    1d68:	21a0c82c 	lsrcs	r12, r12, #16
    1d6c:	22422010 	subcs	r2, r2, #16
    1d70:	e35c0c01 	cmp	r12, #256	; 0x100
    1d74:	21a0c42c 	lsrcs	r12, r12, #8
    1d78:	22422008 	subcs	r2, r2, #8
    1d7c:	e35c0010 	cmp	r12, #16
    1d80:	21a0c22c 	lsrcs	r12, r12, #4
    1d84:	22422004 	subcs	r2, r2, #4
    1d88:	e35c0004 	cmp	r12, #4
    1d8c:	22422002 	subcs	r2, r2, #2
    1d90:	304220ac 	subcc	r2, r2, r12, lsr #1
    1d94:	e05221ac 	subs	r2, r2, r12, lsr #3
    1d98:	e0433b82 	sub	r3, r3, r2, lsl #23
    1d9c:	ba000006 	blt	1dbc <__aeabi_l2f+0x90>
    1da0:	e0833211 	add	r3, r3, r1, lsl r2
    1da4:	e1a0c210 	lsl	r12, r0, r2
    1da8:	e2622020 	rsb	r2, r2, #32
    1dac:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1db0:	e0a30230 	adc	r0, r3, r0, lsr r2
    1db4:	03c00001 	biceq	r0, r0, #1
    1db8:	e12fff1e 	bx	lr
    1dbc:	e2822020 	add	r2, r2, #32
    1dc0:	e1a0c211 	lsl	r12, r1, r2
    1dc4:	e2622020 	rsb	r2, r2, #32
    1dc8:	e190008c 	orrs	r0, r0, r12, lsl #1
    1dcc:	e0a30231 	adc	r0, r3, r1, lsr r2
    1dd0:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1dd4:	e12fff1e 	bx	lr

00001dd8 <__aeabi_fmul>:
    1dd8:	e3a0c0ff 	mov	r12, #255	; 0xff
    1ddc:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1de0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    1de4:	1132000c 	teqne	r2, r12
    1de8:	1133000c 	teqne	r3, r12
    1dec:	0a00003e 	beq	1eec <__aeabi_fmul+0x114>
    1df0:	e0822003 	add	r2, r2, r3
    1df4:	e020c001 	eor	r12, r0, r1
    1df8:	e1b00480 	lsls	r0, r0, #9
    1dfc:	11b01481 	lslsne	r1, r1, #9
    1e00:	0a000010 	beq	1e48 <__aeabi_fmul+0x70>
    1e04:	e3a03302 	mov	r3, #134217728	; 0x8000000
    1e08:	e18302a0 	orr	r0, r3, r0, lsr #5
    1e0c:	e18312a1 	orr	r1, r3, r1, lsr #5
    1e10:	e0813190 	umull	r3, r1, r0, r1
    1e14:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1e18:	e3510502 	cmp	r1, #8388608	; 0x800000
    1e1c:	31a01081 	lslcc	r1, r1, #1
    1e20:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    1e24:	31a03083 	lslcc	r3, r3, #1
    1e28:	e1800001 	orr	r0, r0, r1
    1e2c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    1e30:	e35200fd 	cmp	r2, #253	; 0xfd
    1e34:	8a00000f 	bhi	1e78 <__aeabi_fmul+0xa0>
    1e38:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    1e3c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1e40:	03c00001 	biceq	r0, r0, #1
    1e44:	e12fff1e 	bx	lr
    1e48:	e3300000 	teq	r0, #0
    1e4c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    1e50:	01a01481 	lsleq	r1, r1, #9
    1e54:	e18c04a0 	orr	r0, r12, r0, lsr #9
    1e58:	e18004a1 	orr	r0, r0, r1, lsr #9
    1e5c:	e252207f 	subs	r2, r2, #127	; 0x7f
    1e60:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1e64:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1e68:	c12fff1e 	bxgt	lr
    1e6c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1e70:	e3a03000 	mov	r3, #0
    1e74:	e2522001 	subs	r2, r2, #1
    1e78:	ca000035 	bgt	1f54 <__aeabi_fmul+0x17c>
    1e7c:	e3720019 	cmn	r2, #25
    1e80:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    1e84:	d12fff1e 	bxle	lr
    1e88:	e2622000 	rsb	r2, r2, #0
    1e8c:	e1b01080 	lsls	r1, r0, #1
    1e90:	e1a01231 	lsr	r1, r1, r2
    1e94:	e2622020 	rsb	r2, r2, #32
    1e98:	e1a0c210 	lsl	r12, r0, r2
    1e9c:	e1b00061 	rrxs	r0, r1
    1ea0:	e2a00000 	adc	r0, r0, #0
    1ea4:	e193308c 	orrs	r3, r3, r12, lsl #1
    1ea8:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1eac:	e12fff1e 	bx	lr
    1eb0:	e3320000 	teq	r2, #0
    1eb4:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    1eb8:	01a00080 	lsleq	r0, r0, #1
    1ebc:	03100502 	tsteq	r0, #8388608	; 0x800000
    1ec0:	02422001 	subeq	r2, r2, #1
    1ec4:	0afffffb 	beq	1eb8 <__aeabi_fmul+0xe0>
    1ec8:	e180000c 	orr	r0, r0, r12
    1ecc:	e3330000 	teq	r3, #0
    1ed0:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    1ed4:	01a01081 	lsleq	r1, r1, #1
    1ed8:	03110502 	tsteq	r1, #8388608	; 0x800000
    1edc:	02433001 	subeq	r3, r3, #1
    1ee0:	0afffffb 	beq	1ed4 <__aeabi_fmul+0xfc>
    1ee4:	e181100c 	orr	r1, r1, r12
    1ee8:	eaffffc0 	b	1df0 <__aeabi_fmul+0x18>
    1eec:	e00c3ba1 	and	r3, r12, r1, lsr #23
    1ef0:	e132000c 	teq	r2, r12
    1ef4:	1133000c 	teqne	r3, r12
    1ef8:	0a000005 	beq	1f14 <__aeabi_fmul+0x13c>
    1efc:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    1f00:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    1f04:	1affffe9 	bne	1eb0 <__aeabi_fmul+0xd8>
    1f08:	e0200001 	eor	r0, r0, r1
    1f0c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1f10:	e12fff1e 	bx	lr
    1f14:	e3300000 	teq	r0, #0
    1f18:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    1f1c:	01a00001 	moveq	r0, r1
    1f20:	13310000 	teqne	r1, #0
    1f24:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    1f28:	0a00000d 	beq	1f64 <__aeabi_fmul+0x18c>
    1f2c:	e132000c 	teq	r2, r12
    1f30:	1a000001 	bne	1f3c <__aeabi_fmul+0x164>
    1f34:	e1b02480 	lsls	r2, r0, #9
    1f38:	1a000009 	bne	1f64 <__aeabi_fmul+0x18c>
    1f3c:	e133000c 	teq	r3, r12
    1f40:	1a000002 	bne	1f50 <__aeabi_fmul+0x178>
    1f44:	e1b03481 	lsls	r3, r1, #9
    1f48:	11a00001 	movne	r0, r1
    1f4c:	1a000004 	bne	1f64 <__aeabi_fmul+0x18c>
    1f50:	e0200001 	eor	r0, r0, r1
    1f54:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1f58:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1f5c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1f60:	e12fff1e 	bx	lr
    1f64:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1f68:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    1f6c:	e12fff1e 	bx	lr

00001f70 <__aeabi_fdiv>:
    1f70:	e3a0c0ff 	mov	r12, #255	; 0xff
    1f74:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1f78:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    1f7c:	1132000c 	teqne	r2, r12
    1f80:	1133000c 	teqne	r3, r12
    1f84:	0a00003a 	beq	2074 <__aeabi_fdiv+0x104>
    1f88:	e0422003 	sub	r2, r2, r3
    1f8c:	e020c001 	eor	r12, r0, r1
    1f90:	e1b01481 	lsls	r1, r1, #9
    1f94:	e1a00480 	lsl	r0, r0, #9
    1f98:	0a00001c 	beq	2010 <__aeabi_fdiv+0xa0>
    1f9c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    1fa0:	e1831221 	orr	r1, r3, r1, lsr #4
    1fa4:	e1833220 	orr	r3, r3, r0, lsr #4
    1fa8:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1fac:	e1530001 	cmp	r3, r1
    1fb0:	31a03083 	lslcc	r3, r3, #1
    1fb4:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    1fb8:	e3a0c502 	mov	r12, #8388608	; 0x800000
    1fbc:	e1530001 	cmp	r3, r1
    1fc0:	20433001 	subcs	r3, r3, r1
    1fc4:	2180000c 	orrcs	r0, r0, r12
    1fc8:	e15300a1 	cmp	r3, r1, lsr #1
    1fcc:	204330a1 	subcs	r3, r3, r1, lsr #1
    1fd0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1fd4:	e1530121 	cmp	r3, r1, lsr #2
    1fd8:	20433121 	subcs	r3, r3, r1, lsr #2
    1fdc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1fe0:	e15301a1 	cmp	r3, r1, lsr #3
    1fe4:	204331a1 	subcs	r3, r3, r1, lsr #3
    1fe8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1fec:	e1b03203 	lsls	r3, r3, #4
    1ff0:	11b0c22c 	lsrsne	r12, r12, #4
    1ff4:	1afffff0 	bne	1fbc <__aeabi_fdiv+0x4c>
    1ff8:	e35200fd 	cmp	r2, #253	; 0xfd
    1ffc:	8affff9d 	bhi	1e78 <__aeabi_fmul+0xa0>
    2000:	e1530001 	cmp	r3, r1
    2004:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2008:	03c00001 	biceq	r0, r0, #1
    200c:	e12fff1e 	bx	lr
    2010:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2014:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2018:	e292207f 	adds	r2, r2, #127	; 0x7f
    201c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2020:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2024:	c12fff1e 	bxgt	lr
    2028:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    202c:	e3a03000 	mov	r3, #0
    2030:	e2522001 	subs	r2, r2, #1
    2034:	eaffff8f 	b	1e78 <__aeabi_fmul+0xa0>
    2038:	e3320000 	teq	r2, #0
    203c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2040:	01a00080 	lsleq	r0, r0, #1
    2044:	03100502 	tsteq	r0, #8388608	; 0x800000
    2048:	02422001 	subeq	r2, r2, #1
    204c:	0afffffb 	beq	2040 <__aeabi_fdiv+0xd0>
    2050:	e180000c 	orr	r0, r0, r12
    2054:	e3330000 	teq	r3, #0
    2058:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    205c:	01a01081 	lsleq	r1, r1, #1
    2060:	03110502 	tsteq	r1, #8388608	; 0x800000
    2064:	02433001 	subeq	r3, r3, #1
    2068:	0afffffb 	beq	205c <__aeabi_fdiv+0xec>
    206c:	e181100c 	orr	r1, r1, r12
    2070:	eaffffc4 	b	1f88 <__aeabi_fdiv+0x18>
    2074:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2078:	e132000c 	teq	r2, r12
    207c:	1a000005 	bne	2098 <__aeabi_fdiv+0x128>
    2080:	e1b02480 	lsls	r2, r0, #9
    2084:	1affffb6 	bne	1f64 <__aeabi_fmul+0x18c>
    2088:	e133000c 	teq	r3, r12
    208c:	1affffaf 	bne	1f50 <__aeabi_fmul+0x178>
    2090:	e1a00001 	mov	r0, r1
    2094:	eaffffb2 	b	1f64 <__aeabi_fmul+0x18c>
    2098:	e133000c 	teq	r3, r12
    209c:	1a000003 	bne	20b0 <__aeabi_fdiv+0x140>
    20a0:	e1b03481 	lsls	r3, r1, #9
    20a4:	0affff97 	beq	1f08 <__aeabi_fmul+0x130>
    20a8:	e1a00001 	mov	r0, r1
    20ac:	eaffffac 	b	1f64 <__aeabi_fmul+0x18c>
    20b0:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    20b4:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    20b8:	1affffde 	bne	2038 <__aeabi_fdiv+0xc8>
    20bc:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    20c0:	1affffa2 	bne	1f50 <__aeabi_fmul+0x178>
    20c4:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    20c8:	1affff8e 	bne	1f08 <__aeabi_fmul+0x130>
    20cc:	eaffffa4 	b	1f64 <__aeabi_fmul+0x18c>

000020d0 <__aeabi_f2iz>:
    20d0:	e1a02080 	lsl	r2, r0, #1
    20d4:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    20d8:	3a000008 	bcc	2100 <__aeabi_f2iz+0x30>
    20dc:	e3a0309e 	mov	r3, #158	; 0x9e
    20e0:	e0532c22 	subs	r2, r3, r2, lsr #24
    20e4:	9a000007 	bls	2108 <__aeabi_f2iz+0x38>
    20e8:	e1a03400 	lsl	r3, r0, #8
    20ec:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    20f0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    20f4:	e1a00233 	lsr	r0, r3, r2
    20f8:	12600000 	rsbne	r0, r0, #0
    20fc:	e12fff1e 	bx	lr
    2100:	e3a00000 	mov	r0, #0
    2104:	e12fff1e 	bx	lr
    2108:	e3720061 	cmn	r2, #97	; 0x61
    210c:	1a000001 	bne	2118 <__aeabi_f2iz+0x48>
    2110:	e1b02480 	lsls	r2, r0, #9
    2114:	1a000002 	bne	2124 <__aeabi_f2iz+0x54>
    2118:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    211c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2120:	e12fff1e 	bx	lr
    2124:	e3a00000 	mov	r0, #0
    2128:	e12fff1e 	bx	lr

0000212c <atexit>:
    212c:	e1a01000 	mov	r1, r0
    2130:	e3a00000 	mov	r0, #0
    2134:	e92d4008 	push	{r3, lr}
    2138:	e1a02000 	mov	r2, r0
    213c:	e1a03000 	mov	r3, r0
    2140:	eb00000e 	bl	2180 <__register_exitproc>
    2144:	e8bd4008 	pop	{r3, lr}
    2148:	e12fff1e 	bx	lr

0000214c <exit>:
    214c:	e92d4008 	push	{r3, lr}
    2150:	e3a01000 	mov	r1, #0
    2154:	e1a04000 	mov	r4, r0
    2158:	eb000045 	bl	2274 <__call_exitprocs>
    215c:	e59f3018 	ldr	r3, [pc, #24]	; 217c <exit+0x30>
    2160:	e5930000 	ldr	r0, [r3]
    2164:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2168:	e3530000 	cmp	r3, #0
    216c:	11a0e00f 	movne	lr, pc
    2170:	112fff13 	bxne	r3
    2174:	e1a00004 	mov	r0, r4
    2178:	eb0000c9 	bl	24a4 <_exit>
    217c:	0000254c 	.word	0x0000254c

00002180 <__register_exitproc>:
    2180:	e59fc0e4 	ldr	r12, [pc, #228]	; 226c <__register_exitproc+0xec>
    2184:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2188:	e59c4000 	ldr	r4, [r12]
    218c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2190:	e35c0000 	cmp	r12, #0
    2194:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2198:	e59c5004 	ldr	r5, [r12, #4]
    219c:	0584c148 	streq	r12, [r4, #328]	; 0x148
    21a0:	e355001f 	cmp	r5, #31
    21a4:	e24dd010 	sub	sp, sp, #16
    21a8:	e1a06000 	mov	r6, r0
    21ac:	da000015 	ble	2208 <__register_exitproc+0x88>
    21b0:	e59f00b8 	ldr	r0, [pc, #184]	; 2270 <__register_exitproc+0xf0>
    21b4:	e3500000 	cmp	r0, #0
    21b8:	1a000001 	bne	21c4 <__register_exitproc+0x44>
    21bc:	e3e00000 	mvn	r0, #0
    21c0:	ea000018 	b	2228 <__register_exitproc+0xa8>
    21c4:	e3a00e19 	mov	r0, #400	; 0x190
    21c8:	e58d100c 	str	r1, [sp, #12]
    21cc:	e58d2008 	str	r2, [sp, #8]
    21d0:	e58d3004 	str	r3, [sp, #4]
    21d4:	e320f000 	nop	{0}
    21d8:	e250c000 	subs	r12, r0, #0
    21dc:	e59d100c 	ldr	r1, [sp, #12]
    21e0:	e59d2008 	ldr	r2, [sp, #8]
    21e4:	e59d3004 	ldr	r3, [sp, #4]
    21e8:	0afffff3 	beq	21bc <__register_exitproc+0x3c>
    21ec:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    21f0:	e3a00000 	mov	r0, #0
    21f4:	e58c0004 	str	r0, [r12, #4]
    21f8:	e58c5000 	str	r5, [r12]
    21fc:	e584c148 	str	r12, [r4, #328]	; 0x148
    2200:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2204:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2208:	e3560000 	cmp	r6, #0
    220c:	e59c4004 	ldr	r4, [r12, #4]
    2210:	1a000007 	bne	2234 <__register_exitproc+0xb4>
    2214:	e2843002 	add	r3, r4, #2
    2218:	e2844001 	add	r4, r4, #1
    221c:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2220:	e58c4004 	str	r4, [r12, #4]
    2224:	e3a00000 	mov	r0, #0
    2228:	e28dd010 	add	sp, sp, #16
    222c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2230:	e12fff1e 	bx	lr
    2234:	e3a00001 	mov	r0, #1
    2238:	e1a00410 	lsl	r0, r0, r4
    223c:	e08c8104 	add	r8, r12, r4, lsl #2
    2240:	e3560002 	cmp	r6, #2
    2244:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2248:	e5883108 	str	r3, [r8, #264]	; 0x108
    224c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2250:	e1877000 	orr	r7, r7, r0
    2254:	01830000 	orreq	r0, r3, r0
    2258:	e1a05008 	mov	r5, r8
    225c:	e5882088 	str	r2, [r8, #136]	; 0x88
    2260:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2264:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2268:	eaffffe9 	b	2214 <__register_exitproc+0x94>
    226c:	0000254c 	.word	0x0000254c
    2270:	00000000 	.word	0x00000000

00002274 <__call_exitprocs>:
    2274:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2278:	e59f3168 	ldr	r3, [pc, #360]	; 23e8 <__call_exitprocs+0x174>
    227c:	e5933000 	ldr	r3, [r3]
    2280:	e24dd014 	sub	sp, sp, #20
    2284:	e58d3004 	str	r3, [sp, #4]
    2288:	e2833f52 	add	r3, r3, #328	; 0x148
    228c:	e58d0008 	str	r0, [sp, #8]
    2290:	e58d300c 	str	r3, [sp, #12]
    2294:	e1a07001 	mov	r7, r1
    2298:	e3a08001 	mov	r8, #1
    229c:	e59d3004 	ldr	r3, [sp, #4]
    22a0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    22a4:	e3560000 	cmp	r6, #0
    22a8:	e59db00c 	ldr	r11, [sp, #12]
    22ac:	0a000033 	beq	2380 <__call_exitprocs+0x10c>
    22b0:	e5965004 	ldr	r5, [r6, #4]
    22b4:	e2554001 	subs	r4, r5, #1
    22b8:	5286a088 	addpl	r10, r6, #136	; 0x88
    22bc:	5285501f 	addpl	r5, r5, #31
    22c0:	508a5105 	addpl	r5, r10, r5, lsl #2
    22c4:	5a000007 	bpl	22e8 <__call_exitprocs+0x74>
    22c8:	ea000029 	b	2374 <__call_exitprocs+0x100>
    22cc:	e5953000 	ldr	r3, [r5]
    22d0:	e1530007 	cmp	r3, r7
    22d4:	0a000005 	beq	22f0 <__call_exitprocs+0x7c>
    22d8:	e2444001 	sub	r4, r4, #1
    22dc:	e3740001 	cmn	r4, #1
    22e0:	e2455004 	sub	r5, r5, #4
    22e4:	0a000022 	beq	2374 <__call_exitprocs+0x100>
    22e8:	e3570000 	cmp	r7, #0
    22ec:	1afffff6 	bne	22cc <__call_exitprocs+0x58>
    22f0:	e5963004 	ldr	r3, [r6, #4]
    22f4:	e06a2005 	rsb	r2, r10, r5
    22f8:	e2433001 	sub	r3, r3, #1
    22fc:	e0862002 	add	r2, r6, r2
    2300:	e1530004 	cmp	r3, r4
    2304:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2308:	13a01000 	movne	r1, #0
    230c:	05864004 	streq	r4, [r6, #4]
    2310:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2314:	e3530000 	cmp	r3, #0
    2318:	0affffee 	beq	22d8 <__call_exitprocs+0x64>
    231c:	e1a02418 	lsl	r2, r8, r4
    2320:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2324:	e1120001 	tst	r2, r1
    2328:	e5969004 	ldr	r9, [r6, #4]
    232c:	0a000016 	beq	238c <__call_exitprocs+0x118>
    2330:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2334:	e1120001 	tst	r2, r1
    2338:	1a000016 	bne	2398 <__call_exitprocs+0x124>
    233c:	e59d0008 	ldr	r0, [sp, #8]
    2340:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2344:	e1a0e00f 	mov	lr, pc
    2348:	e12fff13 	bx	r3
    234c:	e5963004 	ldr	r3, [r6, #4]
    2350:	e1530009 	cmp	r3, r9
    2354:	1affffd0 	bne	229c <__call_exitprocs+0x28>
    2358:	e59b3000 	ldr	r3, [r11]
    235c:	e1530006 	cmp	r3, r6
    2360:	1affffcd 	bne	229c <__call_exitprocs+0x28>
    2364:	e2444001 	sub	r4, r4, #1
    2368:	e3740001 	cmn	r4, #1
    236c:	e2455004 	sub	r5, r5, #4
    2370:	1affffdc 	bne	22e8 <__call_exitprocs+0x74>
    2374:	e59f1070 	ldr	r1, [pc, #112]	; 23ec <__call_exitprocs+0x178>
    2378:	e3510000 	cmp	r1, #0
    237c:	1a000009 	bne	23a8 <__call_exitprocs+0x134>
    2380:	e28dd014 	add	sp, sp, #20
    2384:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2388:	e12fff1e 	bx	lr
    238c:	e1a0e00f 	mov	lr, pc
    2390:	e12fff13 	bx	r3
    2394:	eaffffec 	b	234c <__call_exitprocs+0xd8>
    2398:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    239c:	e1a0e00f 	mov	lr, pc
    23a0:	e12fff13 	bx	r3
    23a4:	eaffffe8 	b	234c <__call_exitprocs+0xd8>
    23a8:	e5963004 	ldr	r3, [r6, #4]
    23ac:	e3530000 	cmp	r3, #0
    23b0:	e5963000 	ldr	r3, [r6]
    23b4:	1a000008 	bne	23dc <__call_exitprocs+0x168>
    23b8:	e3530000 	cmp	r3, #0
    23bc:	0a000006 	beq	23dc <__call_exitprocs+0x168>
    23c0:	e1a00006 	mov	r0, r6
    23c4:	e58b3000 	str	r3, [r11]
    23c8:	e320f000 	nop	{0}
    23cc:	e59b6000 	ldr	r6, [r11]
    23d0:	e3560000 	cmp	r6, #0
    23d4:	1affffb5 	bne	22b0 <__call_exitprocs+0x3c>
    23d8:	eaffffe8 	b	2380 <__call_exitprocs+0x10c>
    23dc:	e1a0b006 	mov	r11, r6
    23e0:	e1a06003 	mov	r6, r3
    23e4:	eafffff9 	b	23d0 <__call_exitprocs+0x15c>
    23e8:	0000254c 	.word	0x0000254c
    23ec:	00000000 	.word	0x00000000

000023f0 <register_fini>:
    23f0:	e92d4008 	push	{r3, lr}
    23f4:	e59f3010 	ldr	r3, [pc, #16]	; 240c <register_fini+0x1c>
    23f8:	e3530000 	cmp	r3, #0
    23fc:	159f000c 	ldrne	r0, [pc, #12]	; 2410 <register_fini+0x20>
    2400:	1bffff49 	blne	212c <atexit>
    2404:	e8bd4008 	pop	{r3, lr}
    2408:	e12fff1e 	bx	lr
    240c:	00002574 	.word	0x00002574
    2410:	00002414 	.word	0x00002414

00002414 <__libc_fini_array>:
    2414:	e92d4038 	push	{r3, r4, r5, lr}
    2418:	e59f5030 	ldr	r5, [pc, #48]	; 2450 <__libc_fini_array+0x3c>
    241c:	e59f4030 	ldr	r4, [pc, #48]	; 2454 <__libc_fini_array+0x40>
    2420:	e0654004 	rsb	r4, r5, r4
    2424:	e1b04144 	asrs	r4, r4, #2
    2428:	10855104 	addne	r5, r5, r4, lsl #2
    242c:	0a000004 	beq	2444 <__libc_fini_array+0x30>
    2430:	e5353004 	ldr	r3, [r5, #-4]!
    2434:	e1a0e00f 	mov	lr, pc
    2438:	e12fff13 	bx	r3
    243c:	e2544001 	subs	r4, r4, #1
    2440:	1afffffa 	bne	2430 <__libc_fini_array+0x1c>
    2444:	eb00004a 	bl	2574 <__libc_fini>
    2448:	e8bd4038 	pop	{r3, r4, r5, lr}
    244c:	e12fff1e 	bx	lr
    2450:	0000258c 	.word	0x0000258c
    2454:	00002590 	.word	0x00002590

00002458 <__cs3_premain>:
    2458:	e92d4008 	push	{r3, lr}
    245c:	eb000017 	bl	24c0 <__libc_init_array>
    2460:	e59f3030 	ldr	r3, [pc, #48]	; 2498 <__cs3_premain+0x40>
    2464:	e3530000 	cmp	r3, #0
    2468:	15930000 	ldrne	r0, [r3]
    246c:	01a00003 	moveq	r0, r3
    2470:	e59f3024 	ldr	r3, [pc, #36]	; 249c <__cs3_premain+0x44>
    2474:	e3530000 	cmp	r3, #0
    2478:	15931000 	ldrne	r1, [r3]
    247c:	01a01003 	moveq	r1, r3
    2480:	e3a02000 	mov	r2, #0
    2484:	ebfff7c8 	bl	3ac <main>
    2488:	e59f3010 	ldr	r3, [pc, #16]	; 24a0 <__cs3_premain+0x48>
    248c:	e3530000 	cmp	r3, #0
    2490:	1bffff2d 	blne	214c <exit>
    2494:	eafffffe 	b	2494 <__cs3_premain+0x3c>
	...
    24a0:	0000214c 	.word	0x0000214c

000024a4 <_exit>:
    24a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    24a8:	e3a00018 	mov	r0, #24
    24ac:	e59f1004 	ldr	r1, [pc, #4]	; 24b8 <_exit+0x14>
    24b0:	ef123456 	svc	0x00123456
    24b4:	eafffffe 	b	24b4 <_exit+0x10>
    24b8:	00020026 	.word	0x00020026

000024bc <__cs3_isr_interrupt>:
    24bc:	eafffffe 	b	24bc <__cs3_isr_interrupt>

000024c0 <__libc_init_array>:
    24c0:	e92d4070 	push	{r4, r5, r6, lr}
    24c4:	e59f506c 	ldr	r5, [pc, #108]	; 2538 <__libc_init_array+0x78>
    24c8:	e59f606c 	ldr	r6, [pc, #108]	; 253c <__libc_init_array+0x7c>
    24cc:	e0656006 	rsb	r6, r5, r6
    24d0:	e1b06146 	asrs	r6, r6, #2
    24d4:	12455004 	subne	r5, r5, #4
    24d8:	13a04000 	movne	r4, #0
    24dc:	0a000005 	beq	24f8 <__libc_init_array+0x38>
    24e0:	e5b53004 	ldr	r3, [r5, #4]!
    24e4:	e2844001 	add	r4, r4, #1
    24e8:	e1a0e00f 	mov	lr, pc
    24ec:	e12fff13 	bx	r3
    24f0:	e1560004 	cmp	r6, r4
    24f4:	1afffff9 	bne	24e0 <__libc_init_array+0x20>
    24f8:	e59f5040 	ldr	r5, [pc, #64]	; 2540 <__libc_init_array+0x80>
    24fc:	e59f6040 	ldr	r6, [pc, #64]	; 2544 <__libc_init_array+0x84>
    2500:	e0656006 	rsb	r6, r5, r6
    2504:	eb000012 	bl	2554 <_init>
    2508:	e1b06146 	asrs	r6, r6, #2
    250c:	12455004 	subne	r5, r5, #4
    2510:	13a04000 	movne	r4, #0
    2514:	0a000005 	beq	2530 <__libc_init_array+0x70>
    2518:	e5b53004 	ldr	r3, [r5, #4]!
    251c:	e2844001 	add	r4, r4, #1
    2520:	e1a0e00f 	mov	lr, pc
    2524:	e12fff13 	bx	r3
    2528:	e1560004 	cmp	r6, r4
    252c:	1afffff9 	bne	2518 <__libc_init_array+0x58>
    2530:	e8bd4070 	pop	{r4, r5, r6, lr}
    2534:	e12fff1e 	bx	lr
    2538:	0000256c 	.word	0x0000256c
    253c:	0000256c 	.word	0x0000256c
    2540:	0000256c 	.word	0x0000256c
    2544:	00002574 	.word	0x00002574

Disassembly of section .rodata:

0000254c <_global_impure_ptr>:
    254c:	000313e0 00000043                       ....C...

00002554 <_init>:
    2554:	e1a0c00d 	mov	r12, sp
    2558:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    255c:	e24cb004 	sub	r11, r12, #4
    2560:	e24bd028 	sub	sp, r11, #40	; 0x28
    2564:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2568:	e12fff1e 	bx	lr

0000256c <__init_array_start>:
    256c:	000023f0 	.word	0x000023f0

00002570 <__frame_dummy_init_array_entry>:
    2570:	00000208                                ....

00002574 <__libc_fini>:
    2574:	e1a0c00d 	mov	r12, sp
    2578:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    257c:	e24cb004 	sub	r11, r12, #4
    2580:	e24bd028 	sub	sp, r11, #40	; 0x28
    2584:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2588:	e12fff1e 	bx	lr

0000258c <__fini_array_start>:
    258c:	000001c4 	.word	0x000001c4

00002590 <__cs3_regions>:
	...
    259c:	00031810 	.word	0x00031810
    25a0:	00000048 	.word	0x00000048

000025a4 <__cs3_regions_end>:
    25a4:	00000000 	.word	0x00000000

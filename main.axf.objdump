
//campus.mcgill.ca/emf/CPE/kkoeri/Desktop/G34_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	70 0e 00 00 7c 0e 00 00 88 0e 00 00 94 0e 00 00     p...|...........
      30:	a0 0e 00 00 b0 12 00 00 18 0d 00 00 ac 0e 00 00     ................

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00045c 	bl	124c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000013a0 	.word	0x000013a0

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000017d8 	.word	0x000017d8

00000124 <__cs3_heap_start_ptr>:
     124:	00001800 	.word	0x00001800

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000017e0 	.word	0x000017e0
     170:	000017e3 	.word	0x000017e3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000017e0 	.word	0x000017e0
     1bc:	000017e0 	.word	0x000017e0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000017e0 	.word	0x000017e0
     200:	00000000 	.word	0x00000000
     204:	0000133c 	.word	0x0000133c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000133c 	.word	0x0000133c
     250:	000017e4 	.word	0x000017e4
     254:	000013a0 	.word	0x000013a0
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/int_setup.h"
#include "./drivers/inc/ISRs.h"


int main() {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd038 	sub	sp, sp, #56	; 0x38
	return 0;
}
*/

																/*PART3*/
	int count0 = 0, count1=0, count2 = 0, count3 = 0, count4 = 0, count5 = 0;
     268:	e3a03000 	mov	r3, #0
     26c:	e50b3008 	str	r3, [r11, #-8]
     270:	e3a03000 	mov	r3, #0
     274:	e50b300c 	str	r3, [r11, #-12]
     278:	e3a03000 	mov	r3, #0
     27c:	e50b3010 	str	r3, [r11, #-16]
     280:	e3a03000 	mov	r3, #0
     284:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     288:	e3a03000 	mov	r3, #0
     28c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     290:	e3a03000 	mov	r3, #0
     294:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int holdpbkeydata = 0;
     298:	e3a03000 	mov	r3, #0
     29c:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
//setting all displays to 0 waiting for start
			HEX_write_ASM(HEX0, count0);
     2a0:	e51b3008 	ldr	r3, [r11, #-8]
     2a4:	e6ef3073 	uxtb	r3, r3
     2a8:	e3a00001 	mov	r0, #1
     2ac:	e1a01003 	mov	r1, r3
     2b0:	eb00011c 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX1, count1);
     2b4:	e51b300c 	ldr	r3, [r11, #-12]
     2b8:	e6ef3073 	uxtb	r3, r3
     2bc:	e3a00002 	mov	r0, #2
     2c0:	e1a01003 	mov	r1, r3
     2c4:	eb000117 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX2, count2);
     2c8:	e51b3010 	ldr	r3, [r11, #-16]
     2cc:	e6ef3073 	uxtb	r3, r3
     2d0:	e3a00004 	mov	r0, #4
     2d4:	e1a01003 	mov	r1, r3
     2d8:	eb000112 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX3, count3);
     2dc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     2e0:	e6ef3073 	uxtb	r3, r3
     2e4:	e3a00008 	mov	r0, #8
     2e8:	e1a01003 	mov	r1, r3
     2ec:	eb00010d 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX4, count4);
     2f0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     2f4:	e6ef3073 	uxtb	r3, r3
     2f8:	e3a00010 	mov	r0, #16
     2fc:	e1a01003 	mov	r1, r3
     300:	eb000108 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX5, count5);
     304:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     308:	e6ef3073 	uxtb	r3, r3
     30c:	e3a00020 	mov	r0, #32
     310:	e1a01003 	mov	r1, r3
     314:	eb000103 	bl	728 <HEX_write_ASM>
		int_setup(2, (int[]){73,199});	//setting the lengths and the id's # of the interrupts wuith respect to the header files convention and int_setup file
     318:	e3013340 	movw	r3, #4928	; 0x1340
     31c:	e3403000 	movt	r3, #0
     320:	e24b2028 	sub	r2, r11, #40	; 0x28
     324:	e8930003 	ldm	r3, {r0, r1}
     328:	e8820003 	stm	r2, {r0, r1}
     32c:	e24b3028 	sub	r3, r11, #40	; 0x28
     330:	e3a00002 	mov	r0, #2
     334:	e1a01003 	mov	r1, r3
     338:	eb0002ea 	bl	ee8 <int_setup>
		//int count = 0;
		HPS_TIM_config_t hps_tim;
		
	
		hps_tim.tim = TIM0;		//stopwatch timer
     33c:	e3a03001 	mov	r3, #1
     340:	e54b303c 	strb	r3, [r11, #-60]	; 0xffffffc4
		hps_tim.timeout = 10000;	//miliseconds
     344:	e3023710 	movw	r3, #10000	; 0x2710
     348:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
		hps_tim.LD_en = 1;
     34c:	e3a03001 	mov	r3, #1
     350:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
		hps_tim.INT_en = 1;
     354:	e3a03001 	mov	r3, #1
     358:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		hps_tim.enable = 0;		//set to 0 to stopwatch doesnt start right away
     35c:	e3a03000 	mov	r3, #0
     360:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

		HPS_TIM_config_ASM(&hps_tim);		//configure timer
     364:	e24b303c 	sub	r3, r11, #60	; 0x3c
     368:	e1a00003 	mov	r0, r3
     36c:	eb000135 	bl	848 <HPS_TIM_config_ASM>
		enable_PB_INT_ASM(PB0|PB1|PB2);		//enabling interrupt mask register
     370:	e3a00007 	mov	r0, #7
     374:	eb0001da 	bl	ae4 <enable_PB_INT_ASM>
     378:	ea000000 	b	380 <main+0x124>
			HEX_write_ASM(HEX3, count3);
			HEX_write_ASM(HEX4, count4);
			HEX_write_ASM(HEX5, count5);
		
			}
		}
     37c:	e1a00000 	nop			; (mov r0, r0)
		enable_PB_INT_ASM(PB0|PB1|PB2);		//enabling interrupt mask register
	//	int pb_keys_int_flag = 1;	

		while(1){

			if(pb_keys_int_flag != 0) {// a button was presed
     380:	e30039d8 	movw	r3, #2520	; 0x9d8
     384:	e3403000 	movt	r3, #0
     388:	e5933000 	ldr	r3, [r3]
     38c:	e3530000 	cmp	r3, #0
     390:	0a00004e 	beq	4d0 <main+0x274>
				holdpbkeydata = pb_keys_int_flag;
     394:	e30039d8 	movw	r3, #2520	; 0x9d8
     398:	e3403000 	movt	r3, #0
     39c:	e5933000 	ldr	r3, [r3]
     3a0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
				pb_keys_int_flag = 0; //set back to 0 for next interrupt
     3a4:	e30039d8 	movw	r3, #2520	; 0x9d8
     3a8:	e3403000 	movt	r3, #0
     3ac:	e3a02000 	mov	r2, #0
     3b0:	e5832000 	str	r2, [r3]
					if(holdpbkeydata & 1){
     3b4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     3b8:	e2033001 	and	r3, r3, #1
     3bc:	e3530000 	cmp	r3, #0
     3c0:	0a000005 	beq	3dc <main+0x180>
						hps_tim.enable = 1;
     3c4:	e3a03001 	mov	r3, #1
     3c8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
						HPS_TIM_config_ASM(&hps_tim);
     3cc:	e24b303c 	sub	r3, r11, #60	; 0x3c
     3d0:	e1a00003 	mov	r0, r3
     3d4:	eb00011b 	bl	848 <HPS_TIM_config_ASM>
     3d8:	ea00003c 	b	4d0 <main+0x274>
					}else if(holdpbkeydata & 2){
     3dc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     3e0:	e2033002 	and	r3, r3, #2
     3e4:	e3530000 	cmp	r3, #0
     3e8:	0a000005 	beq	404 <main+0x1a8>
						hps_tim.enable = 0;
     3ec:	e3a03000 	mov	r3, #0
     3f0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
						HPS_TIM_config_ASM(&hps_tim);
     3f4:	e24b303c 	sub	r3, r11, #60	; 0x3c
     3f8:	e1a00003 	mov	r0, r3
     3fc:	eb000111 	bl	848 <HPS_TIM_config_ASM>
     400:	ea000032 	b	4d0 <main+0x274>
					}else if(holdpbkeydata & 4){
     404:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     408:	e2033004 	and	r3, r3, #4
     40c:	e3530000 	cmp	r3, #0
     410:	0a00002e 	beq	4d0 <main+0x274>
							hps_tim.enable = 0;
     414:	e3a03000 	mov	r3, #0
     418:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
						 	count0 = 0;//clearing my counters to 0
     41c:	e3a03000 	mov	r3, #0
     420:	e50b3008 	str	r3, [r11, #-8]
							count1 = 0;
     424:	e3a03000 	mov	r3, #0
     428:	e50b300c 	str	r3, [r11, #-12]
							count2 = 0;
     42c:	e3a03000 	mov	r3, #0
     430:	e50b3010 	str	r3, [r11, #-16]
							count3 = 0;
     434:	e3a03000 	mov	r3, #0
     438:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
							count4 = 0;
     43c:	e3a03000 	mov	r3, #0
     440:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
							count5 = 0;
     444:	e3a03000 	mov	r3, #0
     448:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
							HEX_write_ASM(HEX0, count0);
     44c:	e51b3008 	ldr	r3, [r11, #-8]
     450:	e6ef3073 	uxtb	r3, r3
     454:	e3a00001 	mov	r0, #1
     458:	e1a01003 	mov	r1, r3
     45c:	eb0000b1 	bl	728 <HEX_write_ASM>
							HEX_write_ASM(HEX1, count1);
     460:	e51b300c 	ldr	r3, [r11, #-12]
     464:	e6ef3073 	uxtb	r3, r3
     468:	e3a00002 	mov	r0, #2
     46c:	e1a01003 	mov	r1, r3
     470:	eb0000ac 	bl	728 <HEX_write_ASM>
							HEX_write_ASM(HEX2, count2);
     474:	e51b3010 	ldr	r3, [r11, #-16]
     478:	e6ef3073 	uxtb	r3, r3
     47c:	e3a00004 	mov	r0, #4
     480:	e1a01003 	mov	r1, r3
     484:	eb0000a7 	bl	728 <HEX_write_ASM>
							HEX_write_ASM(HEX3, count3);
     488:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     48c:	e6ef3073 	uxtb	r3, r3
     490:	e3a00008 	mov	r0, #8
     494:	e1a01003 	mov	r1, r3
     498:	eb0000a2 	bl	728 <HEX_write_ASM>
							HEX_write_ASM(HEX4, count4);
     49c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     4a0:	e6ef3073 	uxtb	r3, r3
     4a4:	e3a00010 	mov	r0, #16
     4a8:	e1a01003 	mov	r1, r3
     4ac:	eb00009d 	bl	728 <HEX_write_ASM>
							HEX_write_ASM(HEX5, count5);
     4b0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     4b4:	e6ef3073 	uxtb	r3, r3
     4b8:	e3a00020 	mov	r0, #32
     4bc:	e1a01003 	mov	r1, r3
     4c0:	eb000098 	bl	728 <HEX_write_ASM>
							HPS_TIM_config_ASM(&hps_tim);			
     4c4:	e24b303c 	sub	r3, r11, #60	; 0x3c
     4c8:	e1a00003 	mov	r0, r3
     4cc:	eb0000dd 	bl	848 <HPS_TIM_config_ASM>
					}
			}
			if(hps_tim0_int_flag) {		//timer interrupt, waiting for flag to equal 1, sets every clock cycle
     4d0:	e30039d4 	movw	r3, #2516	; 0x9d4
     4d4:	e3403000 	movt	r3, #0
     4d8:	e5933000 	ldr	r3, [r3]
     4dc:	e3530000 	cmp	r3, #0
     4e0:	0affffa5 	beq	37c <main+0x120>
				hps_tim0_int_flag = 0;
     4e4:	e30039d4 	movw	r3, #2516	; 0x9d4
     4e8:	e3403000 	movt	r3, #0
     4ec:	e3a02000 	mov	r2, #0
     4f0:	e5832000 	str	r2, [r3]
				if(++count0 == 10){
     4f4:	e51b3008 	ldr	r3, [r11, #-8]
     4f8:	e2833001 	add	r3, r3, #1
     4fc:	e50b3008 	str	r3, [r11, #-8]
     500:	e51b3008 	ldr	r3, [r11, #-8]
     504:	e353000a 	cmp	r3, #10
     508:	1a000004 	bne	520 <main+0x2c4>
				count0 = 0;
     50c:	e3a03000 	mov	r3, #0
     510:	e50b3008 	str	r3, [r11, #-8]
				count1 = count1 + 1;
     514:	e51b300c 	ldr	r3, [r11, #-12]
     518:	e2833001 	add	r3, r3, #1
     51c:	e50b300c 	str	r3, [r11, #-12]
				}
					if(count1 == 10){
     520:	e51b300c 	ldr	r3, [r11, #-12]
     524:	e353000a 	cmp	r3, #10
     528:	1a000004 	bne	540 <main+0x2e4>
						count1 = 0;
     52c:	e3a03000 	mov	r3, #0
     530:	e50b300c 	str	r3, [r11, #-12]
						count2 = count2 + 1;
     534:	e51b3010 	ldr	r3, [r11, #-16]
     538:	e2833001 	add	r3, r3, #1
     53c:	e50b3010 	str	r3, [r11, #-16]
				}
					if(count2 == 10){
     540:	e51b3010 	ldr	r3, [r11, #-16]
     544:	e353000a 	cmp	r3, #10
     548:	1a000004 	bne	560 <main+0x304>
					count2 = 0;
     54c:	e3a03000 	mov	r3, #0
     550:	e50b3010 	str	r3, [r11, #-16]
					count3 = count3 + 1;
     554:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     558:	e2833001 	add	r3, r3, #1
     55c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				}
					if(count3 == 6){//second display to update minute one
     560:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     564:	e3530006 	cmp	r3, #6
     568:	1a000004 	bne	580 <main+0x324>
					count3 = 0;
     56c:	e3a03000 	mov	r3, #0
     570:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					count4 = count4 + 1;
     574:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     578:	e2833001 	add	r3, r3, #1
     57c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				}
					if(count4 == 10){
     580:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     584:	e353000a 	cmp	r3, #10
     588:	1a000004 	bne	5a0 <main+0x344>
					count4 = 0;
     58c:	e3a03000 	mov	r3, #0
     590:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
					count5 = count5 + 1;
     594:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     598:	e2833001 	add	r3, r3, #1
     59c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				}
					if(count5 == 6){//end of stopwatch capacity
     5a0:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     5a4:	e3530006 	cmp	r3, #6
     5a8:	1a000001 	bne	5b4 <main+0x358>
						count5 = 0;
     5ac:	e3a03000 	mov	r3, #0
     5b0:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				}
			
			HEX_write_ASM(HEX0, count0);
     5b4:	e51b3008 	ldr	r3, [r11, #-8]
     5b8:	e6ef3073 	uxtb	r3, r3
     5bc:	e3a00001 	mov	r0, #1
     5c0:	e1a01003 	mov	r1, r3
     5c4:	eb000057 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX1, count1);
     5c8:	e51b300c 	ldr	r3, [r11, #-12]
     5cc:	e6ef3073 	uxtb	r3, r3
     5d0:	e3a00002 	mov	r0, #2
     5d4:	e1a01003 	mov	r1, r3
     5d8:	eb000052 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX2, count2);
     5dc:	e51b3010 	ldr	r3, [r11, #-16]
     5e0:	e6ef3073 	uxtb	r3, r3
     5e4:	e3a00004 	mov	r0, #4
     5e8:	e1a01003 	mov	r1, r3
     5ec:	eb00004d 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX3, count3);
     5f0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     5f4:	e6ef3073 	uxtb	r3, r3
     5f8:	e3a00008 	mov	r0, #8
     5fc:	e1a01003 	mov	r1, r3
     600:	eb000048 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX4, count4);
     604:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     608:	e6ef3073 	uxtb	r3, r3
     60c:	e3a00010 	mov	r0, #16
     610:	e1a01003 	mov	r1, r3
     614:	eb000043 	bl	728 <HEX_write_ASM>
			HEX_write_ASM(HEX5, count5);
     618:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     61c:	e6ef3073 	uxtb	r3, r3
     620:	e3a00020 	mov	r0, #32
     624:	e1a01003 	mov	r1, r3
     628:	eb00003e 	bl	728 <HEX_write_ASM>
		
			}
		}
     62c:	eaffff52 	b	37c <main+0x120>

00000630 <HEX_clear_ASM>:
			.global HEX_clear_ASM
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:
				PUSH {R0-R12,LR}		//convention save states
     630:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
				LDR R1, =HEX0_BASE	//loading memory lcation fo HEX0 to HEX3
     634:	e59f1204 	ldr	r1, [pc, #516]	; 840 <Exit_write+0x8>
				LDR R2, =HEX4_BASE	//loading memory location for HEX4 and HEX5
     638:	e59f2204 	ldr	r2, [pc, #516]	; 844 <Exit_write+0xc>
				MOV R3, #1			//iterator to compare onehot encoded 
     63c:	e3a03001 	mov	r3, #1
				//MOV R4, 0			//hard coded all 1s to clear 8
				MOV R5, #0			//counter for effective adressing
     640:	e3a05000 	mov	r5, #0

00000644 <LOOP_clear>:
				

LOOP_clear:		CMP R5, #5			//there are only 5 7 segment lights, exit if its more than 5
     644:	e3550005 	cmp	r5, #5
				BGT Exit_Hex_Clear
     648:	ca000015 	bgt	6a4 <Exit_Hex_Clear>

				TST R0, R3			//compare input with on or off segmet
     64c:	e1100003 	tst	r0, r3
				BNE CLEAR			//bitwise compare
     650:	1a000000 	bne	658 <CLEAR>
				B end_Clear			
     654:	ea00000f 	b	698 <end_Clear>

00000658 <CLEAR>:

CLEAR:			CMP R5, #3			//checking if in hex0 base or hex 4 base
     658:	e3550003 	cmp	r5, #3
				MOVGT R1, R2		//give R1 hexbase4 so above code works
     65c:	c1a01002 	movgt	r1, r2
				LDR R7, [R1]
     660:	e5917000 	ldr	r7, [r1]
				TST R0, #1
     664:	e3100001 	tst	r0, #1
				ANDNE R7, R7, #0xFFFFFF00		
     668:	13c770ff 	bicne	r7, r7, #255	; 0xff
				TST R0, #2						
     66c:	e3100002 	tst	r0, #2
				ANDNE R7, R7, #0xFFFF00FF  	
     670:	13c77cff 	bicne	r7, r7, #65280	; 0xff00
				TST R0, #4					
     674:	e3100004 	tst	r0, #4
				ANDNE R7, R7, #0xFF00FFFF		
     678:	13c778ff 	bicne	r7, r7, #16711680	; 0xff0000
				TST R0, #8					
     67c:	e3100008 	tst	r0, #8
				ANDNE R7, R7, #0x00FFFFFF
     680:	13c774ff 	bicne	r7, r7, #-16777216	; 0xff000000
				TST R0, #16
     684:	e3100010 	tst	r0, #16
				ANDNE R7, R7, #0xFFFFFF00		
     688:	13c770ff 	bicne	r7, r7, #255	; 0xff
				TST R0, #32						
     68c:	e3100020 	tst	r0, #32
				ANDNE R7, R7, #0xFFFF00FF  			
     690:	13c77cff 	bicne	r7, r7, #65280	; 0xff00

				STR R7, [R1]		//load contents from register of which hexbase is being used
     694:	e5817000 	str	r7, [r1]

00000698 <end_Clear>:
							

end_Clear:		LSL R3, #1
     698:	e1a03083 	lsl	r3, r3, #1
				ADD R5, R5, #1
     69c:	e2855001 	add	r5, r5, #1
				B LOOP_clear
     6a0:	eaffffe7 	b	644 <LOOP_clear>

000006a4 <Exit_Hex_Clear>:

Exit_Hex_Clear:	POP {R0-R12,LR}
     6a4:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
				BX LR
     6a8:	e12fff1e 	bx	lr

000006ac <HEX_flood_ASM>:


HEX_flood_ASM:	PUSH {R0-R12,LR}		//convention save states
     6ac:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
				LDR R1, =HEX0_BASE	//loading memory lcation fo HEX0 to HEX3
     6b0:	e59f1188 	ldr	r1, [pc, #392]	; 840 <Exit_write+0x8>
				LDR R2, =HEX4_BASE	//loading memory location for HEX4 and HEX5
     6b4:	e59f2188 	ldr	r2, [pc, #392]	; 844 <Exit_write+0xc>
				MOV R3, #1			//iterator to compare onehot encoded 
     6b8:	e3a03001 	mov	r3, #1
				//MOV R4, #0xFF		//hard coded all 1s to flood 8
				MOV R5, #0			//counter for effective adressing
     6bc:	e3a05000 	mov	r5, #0

000006c0 <LOOP_flood>:
				//MOV R6, #0		//access bits to turn on and off in register
				//MOV R8, #0xFF		//all ones


LOOP_flood:		CMP R5, #5
     6c0:	e3550005 	cmp	r5, #5
				BGT Exit_Hex_Flood
     6c4:	ca000015 	bgt	720 <Exit_Hex_Flood>

				TST R0, R3			//compare input with on or off
     6c8:	e1100003 	tst	r0, r3
				BNE FLOOD			//bitwise compare
     6cc:	1a000000 	bne	6d4 <FLOOD>
				B end_Flood			
     6d0:	ea00000f 	b	714 <end_Flood>

000006d4 <FLOOD>:

FLOOD:			CMP R5, #3			//checking if in hex0 base or hex 4 base
     6d4:	e3550003 	cmp	r5, #3
				MOVGT R1, R2		//give R1 hexbase4 so above code works
     6d8:	c1a01002 	movgt	r1, r2
				LDR R7, [R1]
     6dc:	e5917000 	ldr	r7, [r1]
				TST R0, #1
     6e0:	e3100001 	tst	r0, #1
				ORRNE R7, R7, #0x000000FF		
     6e4:	138770ff 	orrne	r7, r7, #255	; 0xff
				TST R0, #2						
     6e8:	e3100002 	tst	r0, #2
				ORRNE R7, R7, #0x0000FF00  	
     6ec:	13877cff 	orrne	r7, r7, #65280	; 0xff00
				TST R0, #4					
     6f0:	e3100004 	tst	r0, #4
				ORRNE R7, R7, #0x00FF0000		
     6f4:	138778ff 	orrne	r7, r7, #16711680	; 0xff0000
				TST R0, #8					
     6f8:	e3100008 	tst	r0, #8
				ORRNE R7, R7, #0xFF000000
     6fc:	138774ff 	orrne	r7, r7, #-16777216	; 0xff000000
				TST R0, #16
     700:	e3100010 	tst	r0, #16
				ORRNE R7, R7, #0x000000FF		
     704:	138770ff 	orrne	r7, r7, #255	; 0xff
				TST R0, #32						
     708:	e3100020 	tst	r0, #32
				ORRNE R7, R7, #0x0000FF00  			
     70c:	13877cff 	orrne	r7, r7, #65280	; 0xff00

				STR R7, [R1]		//load contents from register of which hexbase is being used
     710:	e5817000 	str	r7, [r1]

00000714 <end_Flood>:
							
end_Flood:		LSL R3, #1
     714:	e1a03083 	lsl	r3, r3, #1
				ADD R5, R5, #1
     718:	e2855001 	add	r5, r5, #1
				B LOOP_flood
     71c:	eaffffe7 	b	6c0 <LOOP_flood>

00000720 <Exit_Hex_Flood>:

Exit_Hex_Flood:	POP {R0-R12,LR}
     720:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
				BX LR
     724:	e12fff1e 	bx	lr

00000728 <HEX_write_ASM>:




HEX_write_ASM:
				PUSH {R0-R12,LR}		//convention save states
     728:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
				LDR R2, =HEX0_BASE	//loading memory lcation fo HEX0 to HEX3
     72c:	e59f210c 	ldr	r2, [pc, #268]	; 840 <Exit_write+0x8>
				LDR R3, =HEX4_BASE	//loading memory location for HEX4 and HEX5
     730:	e59f310c 	ldr	r3, [pc, #268]	; 844 <Exit_write+0xc>
				MOV R4, #1			//iterator to compare onehot encoded 
     734:	e3a04001 	mov	r4, #1
				MOV R6, #0			//number to write on the display
     738:	e3a06000 	mov	r6, #0
				MOV R5, #0			//counter for which HEX to display
     73c:	e3a05000 	mov	r5, #0

00000740 <display_to_Hex>:



display_to_Hex:
	
				CMP 	R1, #0		//0
     740:	e3510000 	cmp	r1, #0
				MOVEQ	R6, #0x3F
     744:	03a0603f 	moveq	r6, #63	; 0x3f
	
				CMP 	R1, #1		//1
     748:	e3510001 	cmp	r1, #1
				MOVEQ	R6, #0x6
     74c:	03a06006 	moveq	r6, #6

				CMP 	R1, #2		//2
     750:	e3510002 	cmp	r1, #2
				MOVEQ	R6, #0x5B
     754:	03a0605b 	moveq	r6, #91	; 0x5b

				CMP 	R1, #3		//3
     758:	e3510003 	cmp	r1, #3
				MOVEQ	R6, #0x4F
     75c:	03a0604f 	moveq	r6, #79	; 0x4f

				CMP 	R1, #4		//4
     760:	e3510004 	cmp	r1, #4
				MOVEQ	R6, #0x66
     764:	03a06066 	moveq	r6, #102	; 0x66

				CMP 	R1, #5		//5
     768:	e3510005 	cmp	r1, #5
				MOVEQ	R6, #0x6D
     76c:	03a0606d 	moveq	r6, #109	; 0x6d

				CMP 	R1, #6		//6
     770:	e3510006 	cmp	r1, #6
				MOVEQ	R6, #0x7D
     774:	03a0607d 	moveq	r6, #125	; 0x7d

				CMP 	R1, #7		// 7
     778:	e3510007 	cmp	r1, #7
				MOVEQ	R6, #0x7
     77c:	03a06007 	moveq	r6, #7

				CMP 	R1, #8		// 8
     780:	e3510008 	cmp	r1, #8
				MOVEQ	R6, #0x7F
     784:	03a0607f 	moveq	r6, #127	; 0x7f

				CMP 	R1, #9		// 9
     788:	e3510009 	cmp	r1, #9
				MOVEQ	R6, #0x67
     78c:	03a06067 	moveq	r6, #103	; 0x67

				CMP 	R1, #10		// A
     790:	e351000a 	cmp	r1, #10
				MOVEQ	R6, #0x77
     794:	03a06077 	moveq	r6, #119	; 0x77

				CMP 	R1, #11		// B
     798:	e351000b 	cmp	r1, #11
				MOVEQ	R6, #0x7C
     79c:	03a0607c 	moveq	r6, #124	; 0x7c

				CMP 	R1, #12		// C
     7a0:	e351000c 	cmp	r1, #12
				MOVEQ	R6, #0x39
     7a4:	03a06039 	moveq	r6, #57	; 0x39

				CMP 	R1, #13		// D
     7a8:	e351000d 	cmp	r1, #13
				MOVEQ	R6, #0x5E
     7ac:	03a0605e 	moveq	r6, #94	; 0x5e
	
				CMP 	R1, #14		// E
     7b0:	e351000e 	cmp	r1, #14
				MOVEQ	R6, #0x79
     7b4:	03a06079 	moveq	r6, #121	; 0x79

				CMP 	R1, #15		// F
     7b8:	e351000f 	cmp	r1, #15
				MOVEQ	R6, #0x71
     7bc:	03a06071 	moveq	r6, #113	; 0x71

000007c0 <LOOP_write>:

LOOP_write:
				CMP 	R5, #5				//to know when to stop
     7c0:	e3550005 	cmp	r5, #5
				BGT 	Exit_write
     7c4:	ca00001b 	bgt	838 <Exit_write>
	
				TST	 	R0, R4				// checks to see if write needed
     7c8:	e1100004 	tst	r0, r4
				BNE 	WRITE
     7cc:	1a000000 	bne	7d4 <WRITE>
				B		end_WRITE
     7d0:	ea000015 	b	82c <end_WRITE>

000007d4 <WRITE>:

WRITE:			CMP R5, #3			//checking if in hex0 base or hex 4 base
     7d4:	e3550003 	cmp	r5, #3
				MOVGT R2, R3		//give R1 hexbase4 so above code works
     7d8:	c1a02003 	movgt	r2, r3
				LDR R7, [R2]
     7dc:	e5927000 	ldr	r7, [r2]
				TST R0, #1
     7e0:	e3100001 	tst	r0, #1
				ANDNE R7, R7, #0xFFFFFF00
     7e4:	13c770ff 	bicne	r7, r7, #255	; 0xff
				ADDNE R7, R7, R6, LSL #0		
     7e8:	10877006 	addne	r7, r7, r6
				TST R0, #2						
     7ec:	e3100002 	tst	r0, #2
				ANDNE R7, R7, #0xFFFF00FF 
     7f0:	13c77cff 	bicne	r7, r7, #65280	; 0xff00
				ADDNE R7, R7, R6, LSL #8	
     7f4:	10877406 	addne	r7, r7, r6, lsl #8
				TST R0, #4					
     7f8:	e3100004 	tst	r0, #4
				ANDNE R7, R7, #0xFF00FFFF	
     7fc:	13c778ff 	bicne	r7, r7, #16711680	; 0xff0000
				ADDNE R7, R7, R6, LSL #16	
     800:	10877806 	addne	r7, r7, r6, lsl #16
				TST R0, #8					
     804:	e3100008 	tst	r0, #8
				ANDNE R7, R7, #0x00FFFFFF
     808:	13c774ff 	bicne	r7, r7, #-16777216	; 0xff000000
				ADDNE R7, R7, R6, LSL #24
     80c:	10877c06 	addne	r7, r7, r6, lsl #24
				TST R0, #16
     810:	e3100010 	tst	r0, #16
				ANDNE R7, R7, #0xFFFFFF00	
     814:	13c770ff 	bicne	r7, r7, #255	; 0xff
				ADDNE R7, R7, R6, LSL #0	
     818:	10877006 	addne	r7, r7, r6
				TST R0, #32						
     81c:	e3100020 	tst	r0, #32
				ANDNE R7, R7, #0xFFFF00FF
     820:	13c77cff 	bicne	r7, r7, #65280	; 0xff00
				ADDNE R7, R7, R6, LSL #8  			
     824:	10877406 	addne	r7, r7, r6, lsl #8

				STR R7, [R2]		//load contents from register of which hexbase is being used
     828:	e5827000 	str	r7, [r2]

0000082c <end_WRITE>:


end_WRITE:		LSL R4, #1
     82c:	e1a04084 	lsl	r4, r4, #1
				ADD R5, R5, #1
     830:	e2855001 	add	r5, r5, #1
				B LOOP_write
     834:	eaffffe1 	b	7c0 <LOOP_write>

00000838 <Exit_write>:

Exit_write:	POP {R0-R12,LR}
     838:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
				BX LR
     83c:	e12fff1e 	bx	lr
			.global HEX_flood_ASM
			.global HEX_write_ASM

HEX_clear_ASM:
				PUSH {R0-R12,LR}		//convention save states
				LDR R1, =HEX0_BASE	//loading memory lcation fo HEX0 to HEX3
     840:	ff200020 	.word	0xff200020
				LDR R2, =HEX4_BASE	//loading memory location for HEX4 and HEX5
     844:	ff200030 	.word	0xff200030

00000848 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     848:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     84c:	e3a01000 	mov	r1, #0
	MOV R2, #1
     850:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     854:	e5907000 	ldr	r7, [r0]
	B LOOP
     858:	eaffffff 	b	85c <LOOP>

0000085c <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     85c:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     860:	0a000000 	beq	868 <CONTINUE>
	BL CONFIG
     864:	eb000004 	bl	87c <CONFIG>

00000868 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     868:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     86c:	e3510004 	cmp	r1, #4
	BLT LOOP
     870:	bafffff9 	blt	85c <LOOP>

00000874 <DONE>:

DONE:
	POP {R4-R7, LR}
     874:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     878:	e12fff1e 	bx	lr

0000087c <CONFIG>:


CONFIG:
	PUSH {LR}
     87c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     880:	e59f3148 	ldr	r3, [pc, #328]	; 9d0 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     884:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     888:	eb000005 	bl	8a4 <DISABLE>
	BL SET_LOAD_VAL
     88c:	eb000008 	bl	8b4 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     890:	eb00000e 	bl	8d0 <SET_LOAD_BIT>
	BL SET_INT_BIT
     894:	eb000013 	bl	8e8 <SET_INT_BIT>
	BL SET_EN_BIT
     898:	eb000019 	bl	904 <SET_EN_BIT>
	
	POP {LR}
     89c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     8a0:	e12fff1e 	bx	lr

000008a4 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     8a4:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     8a8:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     8ac:	e5845008 	str	r5, [r4, #8]
	BX LR
     8b0:	e12fff1e 	bx	lr

000008b4 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     8b4:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     8b8:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     8bc:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     8c0:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     8c4:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     8c8:	e5845000 	str	r5, [r4]
	BX LR
     8cc:	e12fff1e 	bx	lr

000008d0 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     8d0:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     8d4:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     8d8:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     8dc:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     8e0:	e5845008 	str	r5, [r4, #8]
	BX LR
     8e4:	e12fff1e 	bx	lr

000008e8 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     8e8:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     8ec:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     8f0:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     8f4:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     8f8:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     8fc:	e5845008 	str	r5, [r4, #8]
	BX LR
     900:	e12fff1e 	bx	lr

00000904 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     904:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     908:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     90c:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     910:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     914:	e5845008 	str	r5, [r4, #8]
	BX LR
     918:	e12fff1e 	bx	lr

0000091c <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     91c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     920:	e3a01000 	mov	r1, #0
	MOV R2, #1
     924:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     928:	eaffffff 	b	92c <CLEAR_INT_LOOP>

0000092c <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     92c:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     930:	0a000000 	beq	938 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     934:	eb000005 	bl	950 <CLEAR_INT>

00000938 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     938:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     93c:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     940:	bafffff9 	blt	92c <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     944:	eaffffff 	b	948 <CLEAR_INT_DONE>

00000948 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     948:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     94c:	e12fff1e 	bx	lr

00000950 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     950:	e59f3078 	ldr	r3, [pc, #120]	; 9d0 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     954:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     958:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     95c:	e12fff1e 	bx	lr

00000960 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     960:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     964:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     968:	e3a01000 	mov	r1, #0
	MOV R2, #1
     96c:	e3a02001 	mov	r2, #1
	MOV R4, #0
     970:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     974:	eaffffff 	b	978 <READ_INT_LOOP>

00000978 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     978:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     97c:	0a000000 	beq	984 <READ_INT_CONTINUE>
	BL READ_INT
     980:	eb000008 	bl	9a8 <READ_INT>

00000984 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     984:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     988:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     98c:	0a000001 	beq	998 <READ_INT_DONE>
	LSL R4, R4, #1
     990:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     994:	eafffff7 	b	978 <READ_INT_LOOP>

00000998 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     998:	e1a00004 	mov	r0, r4
	POP {R4}
     99c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     9a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     9a4:	e12fff1e 	bx	lr

000009a8 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     9a8:	e59f3020 	ldr	r3, [pc, #32]	; 9d0 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     9ac:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     9b0:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     9b4:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     9b8:	e0244003 	eor	r4, r4, r3
	BX LR
     9bc:	e12fff1e 	bx	lr

000009c0 <HPS_TIM_BASE>:
     9c0:	ffc08000 	.word	0xffc08000
     9c4:	ffc09000 	.word	0xffc09000
     9c8:	ffd00000 	.word	0xffd00000
     9cc:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     9d0:	000009c0 	.word	0x000009c0

000009d4 <hps_tim0_int_flag>:
     9d4:	00000000 	.word	0x00000000

000009d8 <pb_keys_int_flag>:
     9d8:	00000000 	.word	0x00000000

000009dc <A9_PRIV_TIM_ISR>:

pb_keys_int_flag:
	.word 0x00000000

A9_PRIV_TIM_ISR:
	BX LR
     9dc:	e12fff1e 	bx	lr

000009e0 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     9e0:	e12fff1e 	bx	lr

000009e4 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     9e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1
     9e8:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
     9ec:	ebffffca 	bl	91c <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     9f0:	e59f005c 	ldr	r0, [pc, #92]	; a54 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     9f4:	e3a01001 	mov	r1, #1
	STR R1, [R0]
     9f8:	e5801000 	str	r1, [r0]
	POP {LR}
     9fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	
	BX LR
     a00:	e12fff1e 	bx	lr

00000a04 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     a04:	e12fff1e 	bx	lr

00000a08 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     a08:	e12fff1e 	bx	lr

00000a0c <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     a0c:	e12fff1e 	bx	lr

00000a10 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     a10:	e12fff1e 	bx	lr

00000a14 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
     a14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R0, #0
     a18:	e3a00000 	mov	r0, #0
	BL read_PB_edgecap_ASM	//loading value into R0 of edgecap
     a1c:	eb000020 	bl	aa4 <read_PB_edgecap_ASM>
	MOV R2, R0
     a20:	e1a02000 	mov	r2, r0
	BL PB_clear_edgecap_ASM
     a24:	eb000029 	bl	ad0 <PB_clear_edgecap_ASM>
	LDR R3, =pb_keys_int_flag
     a28:	e59f3028 	ldr	r3, [pc, #40]	; a58 <FPGA_PS2_DUAL_ISR+0x8>
	STR R2, [R3]
     a2c:	e5832000 	str	r2, [r3]
	
	POP {LR}
     a30:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     a34:	e12fff1e 	bx	lr

00000a38 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     a38:	e12fff1e 	bx	lr

00000a3c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     a3c:	e12fff1e 	bx	lr

00000a40 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     a40:	e12fff1e 	bx	lr

00000a44 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     a44:	e12fff1e 	bx	lr

00000a48 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     a48:	e12fff1e 	bx	lr

00000a4c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     a4c:	e12fff1e 	bx	lr

00000a50 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     a50:	e12fff1e 	bx	lr
	PUSH {LR}
	
	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim0_int_flag
     a54:	000009d4 	.word	0x000009d4
	PUSH {LR}
	MOV R0, #0
	BL read_PB_edgecap_ASM	//loading value into R0 of edgecap
	MOV R2, R0
	BL PB_clear_edgecap_ASM
	LDR R3, =pb_keys_int_flag
     a58:	000009d8 	.word	0x000009d8

00000a5c <read_LEDs_ASM>:
	.equ LEDs_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM: 
	LDR R1, =LEDs_BASE
     a5c:	e59f1010 	ldr	r1, [pc, #16]	; a74 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
     a60:	e5910000 	ldr	r0, [r1]
	BX LR
     a64:	e12fff1e 	bx	lr

00000a68 <write_LEDs_ASM>:

write_LEDs_ASM: 
	LDR R1, =LEDs_BASE
     a68:	e59f1004 	ldr	r1, [pc, #4]	; a74 <write_LEDs_ASM+0xc>
	STR R0, [R1]
     a6c:	e5810000 	str	r0, [r1]
	BX LR
     a70:	e12fff1e 	bx	lr
	.equ LEDs_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM: 
	LDR R1, =LEDs_BASE
     a74:	ff200000 	.word	0xff200000

00000a78 <read_PB_data_ASM>:
			.global PB_clear_edgecap_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM


read_PB_data_ASM: 	PUSH {R1-R4}				//convention
     a78:	e92d001e 	push	{r1, r2, r3, r4}
					LDR R1, =PB_BASEDATA		//loading memory location of data register
     a7c:	e59f109c 	ldr	r1, [pc, #156]	; b20 <disable_PB_INT_ASM+0x20>
					LDR R0, [R1]			//getting value of keys level triggered and storing into R0
     a80:	e5910000 	ldr	r0, [r1]
					POP	{R1-R4}				//convention
     a84:	e8bd001e 	pop	{r1, r2, r3, r4}
					BX	LR
     a88:	e12fff1e 	bx	lr

00000a8c <PB_data_is_pressed_ASM>:



PB_data_is_pressed_ASM:		PUSH {R1-R12,LR}
     a8c:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEDATA
     a90:	e59f1088 	ldr	r1, [pc, #136]	; b20 <disable_PB_INT_ASM+0x20>
							LDR R2, [R1]
     a94:	e5912000 	ldr	r2, [r1]
							AND R0, R0, R2	//checking if its actually pressed
     a98:	e0000002 	and	r0, r0, r2
							POP {R1-R12,LR}
     a9c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
     aa0:	e12fff1e 	bx	lr

00000aa4 <read_PB_edgecap_ASM>:
							
read_PB_edgecap_ASM:		PUSH {R1-R12,LR}
     aa4:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEEDGECAP		//goign to edgecap register
     aa8:	e59f1074 	ldr	r1, [pc, #116]	; b24 <disable_PB_INT_ASM+0x24>
							LDR R0, [R1]
     aac:	e5910000 	ldr	r0, [r1]
							POP {R1-R12,LR}
     ab0:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
     ab4:	e12fff1e 	bx	lr

00000ab8 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:	PUSH {R1-R12,LR}
     ab8:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEEDGECAP
     abc:	e59f1060 	ldr	r1, [pc, #96]	; b24 <disable_PB_INT_ASM+0x24>
							LDR R2, [R1]
     ac0:	e5912000 	ldr	r2, [r1]
							AND R0, R0, R2
     ac4:	e0000002 	and	r0, r0, r2
							POP {R1-R12,LR}
     ac8:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
     acc:	e12fff1e 	bx	lr

00000ad0 <PB_clear_edgecap_ASM>:
							

PB_clear_edgecap_ASM:		PUSH {R0-R12,LR}
     ad0:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEEDGECAP
     ad4:	e59f1048 	ldr	r1, [pc, #72]	; b24 <disable_PB_INT_ASM+0x24>
							STR R0, [R1]		//putting clear into the edgecap register
     ad8:	e5810000 	str	r0, [r1]
							POP {R0-R12,LR}
     adc:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
     ae0:	e12fff1e 	bx	lr

00000ae4 <enable_PB_INT_ASM>:



enable_PB_INT_ASM:			PUSH {R0-R12,LR}
     ae4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEINTERRUPT
     ae8:	e59f1038 	ldr	r1, [pc, #56]	; b28 <disable_PB_INT_ASM+0x28>
							LDR R2, [R1]
     aec:	e5912000 	ldr	r2, [r1]
							ORR R0, R0, R2		//enable the interrupt to 1 so it can accept interrupts
     af0:	e1800002 	orr	r0, r0, r2
							STR R0, [R1]
     af4:	e5810000 	str	r0, [r1]
							POP {R0-R12,LR}
     af8:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
     afc:	e12fff1e 	bx	lr

00000b00 <disable_PB_INT_ASM>:


disable_PB_INT_ASM:			PUSH {R1-R12,LR}
     b00:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							LDR R1, =PB_BASEINTERRUPT
     b04:	e59f101c 	ldr	r1, [pc, #28]	; b28 <disable_PB_INT_ASM+0x28>
							LDR R2, [R1]
     b08:	e5912000 	ldr	r2, [r1]
							EOR R0, R0, #0xF 	//exclusive OR with 1111 to invert only 0 bits to 1
     b0c:	e220000f 	eor	r0, r0, #15
							AND R2, R2, R0		//bitclear
     b10:	e0022000 	and	r2, r2, r0
							STR R2, [R1]
     b14:	e5812000 	str	r2, [r1]
							POP {R1-R12,LR}
     b18:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
							BX LR
     b1c:	e12fff1e 	bx	lr
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM


read_PB_data_ASM: 	PUSH {R1-R4}				//convention
					LDR R1, =PB_BASEDATA		//loading memory location of data register
     b20:	ff200050 	.word	0xff200050
							AND R0, R0, R2	//checking if its actually pressed
							POP {R1-R12,LR}
							BX LR
							
read_PB_edgecap_ASM:		PUSH {R1-R12,LR}
							LDR R1, =PB_BASEEDGECAP		//goign to edgecap register
     b24:	ff20005c 	.word	0xff20005c
							BX LR



enable_PB_INT_ASM:			PUSH {R0-R12,LR}
							LDR R1, =PB_BASEINTERRUPT
     b28:	ff200058 	.word	0xff200058

00000b2c <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
     b2c:	e59f1004 	ldr	r1, [pc, #4]	; b38 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
     b30:	e5910000 	ldr	r0, [r1]
	BX LR
     b34:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
     b38:	ff200040 	.word	0xff200040

00000b3c <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     b3c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b40:	e28db000 	add	r11, sp, #0
     b44:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     b48:	e3a030d3 	mov	r3, #211	; 0xd3
     b4c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     b50:	e51b3008 	ldr	r3, [r11, #-8]
     b54:	e129f003 	msr	CPSR_fc, r3
}
     b58:	e28bd000 	add	sp, r11, #0
     b5c:	e8bd0800 	ldmfd	sp!, {r11}
     b60:	e12fff1e 	bx	lr

00000b64 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     b64:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b68:	e28db000 	add	r11, sp, #0
     b6c:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     b70:	e3a03053 	mov	r3, #83	; 0x53
     b74:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     b78:	e51b3008 	ldr	r3, [r11, #-8]
     b7c:	e129f003 	msr	CPSR_fc, r3
}
     b80:	e28bd000 	add	sp, r11, #0
     b84:	e8bd0800 	ldmfd	sp!, {r11}
     b88:	e12fff1e 	bx	lr

00000b8c <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     b8c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b90:	e28db000 	add	r11, sp, #0
     b94:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     b98:	e3e03007 	mvn	r3, #7
     b9c:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     ba0:	e3a030d2 	mov	r3, #210	; 0xd2
     ba4:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     ba8:	e51b300c 	ldr	r3, [r11, #-12]
     bac:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     bb0:	e51b3008 	ldr	r3, [r11, #-8]
     bb4:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     bb8:	e3a030d3 	mov	r3, #211	; 0xd3
     bbc:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     bc0:	e51b300c 	ldr	r3, [r11, #-12]
     bc4:	e129f003 	msr	CPSR_fc, r3
}
     bc8:	e28bd000 	add	sp, r11, #0
     bcc:	e8bd0800 	ldmfd	sp!, {r11}
     bd0:	e12fff1e 	bx	lr

00000bd4 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     bd4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bd8:	e28db000 	add	r11, sp, #0
     bdc:	e24dd01c 	sub	sp, sp, #28
     be0:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     be4:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     be8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     bec:	e1a031c3 	asr	r3, r3, #3
     bf0:	e3c33003 	bic	r3, r3, #3
     bf4:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     bf8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     bfc:	e203301f 	and	r3, r3, #31
     c00:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     c04:	e3a02001 	mov	r2, #1
     c08:	e51b300c 	ldr	r3, [r11, #-12]
     c0c:	e1a03312 	lsl	r3, r2, r3
     c10:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     c14:	e51b3008 	ldr	r3, [r11, #-8]
     c18:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     c1c:	e2433c03 	sub	r3, r3, #768	; 0x300
     c20:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     c24:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c28:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     c2c:	e5921000 	ldr	r1, [r2]
     c30:	e51b2010 	ldr	r2, [r11, #-16]
     c34:	e1812002 	orr	r2, r1, r2
     c38:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     c3c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c40:	e3c33003 	bic	r3, r3, #3
     c44:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     c48:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     c4c:	e2033003 	and	r3, r3, #3
     c50:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     c54:	e51b2008 	ldr	r2, [r11, #-8]
     c58:	e51b300c 	ldr	r3, [r11, #-12]
     c5c:	e0823003 	add	r3, r2, r3
     c60:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     c64:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     c68:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     c6c:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     c70:	e6ef2072 	uxtb	r2, r2
     c74:	e5c32000 	strb	r2, [r3]
}
     c78:	e28bd000 	add	sp, r11, #0
     c7c:	e8bd0800 	ldmfd	sp!, {r11}
     c80:	e12fff1e 	bx	lr

00000c84 <config_GIC>:

void config_GIC(int len, int* IDs) {
     c84:	e92d4800 	push	{r11, lr}
     c88:	e28db004 	add	r11, sp, #4
     c8c:	e24dd010 	sub	sp, sp, #16
     c90:	e50b0010 	str	r0, [r11, #-16]
     c94:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     c98:	e3a03000 	mov	r3, #0
     c9c:	e50b3008 	str	r3, [r11, #-8]
     ca0:	ea00000a 	b	cd0 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     ca4:	e51b3008 	ldr	r3, [r11, #-8]
     ca8:	e1a03103 	lsl	r3, r3, #2
     cac:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     cb0:	e0823003 	add	r3, r2, r3
     cb4:	e5933000 	ldr	r3, [r3]
     cb8:	e1a00003 	mov	r0, r3
     cbc:	e3a01001 	mov	r1, #1
     cc0:	ebffffc3 	bl	bd4 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     cc4:	e51b3008 	ldr	r3, [r11, #-8]
     cc8:	e2833001 	add	r3, r3, #1
     ccc:	e50b3008 	str	r3, [r11, #-8]
     cd0:	e51b2008 	ldr	r2, [r11, #-8]
     cd4:	e51b3010 	ldr	r3, [r11, #-16]
     cd8:	e1520003 	cmp	r2, r3
     cdc:	bafffff0 	blt	ca4 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     ce0:	e30c3104 	movw	r3, #49412	; 0xc104
     ce4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ce8:	e30f2fff 	movw	r2, #65535	; 0xffff
     cec:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     cf0:	e3a03cc1 	mov	r3, #49408	; 0xc100
     cf4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     cf8:	e3a02001 	mov	r2, #1
     cfc:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     d00:	e3a03a0d 	mov	r3, #53248	; 0xd000
     d04:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d08:	e3a02001 	mov	r2, #1
     d0c:	e5832000 	str	r2, [r3]
}
     d10:	e24bd004 	sub	sp, r11, #4
     d14:	e8bd8800 	pop	{r11, pc}

00000d18 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     d18:	e24ee004 	sub	lr, lr, #4
     d1c:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     d20:	e28db018 	add	r11, sp, #24
     d24:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     d28:	e30c310c 	movw	r3, #49420	; 0xc10c
     d2c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d30:	e5933000 	ldr	r3, [r3]
     d34:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     d38:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     d3c:	e3530053 	cmp	r3, #83	; 0x53
     d40:	0a00003d 	beq	e3c <__cs3_isr_irq+0x124>
     d44:	e3530053 	cmp	r3, #83	; 0x53
     d48:	ca000011 	bgt	d94 <__cs3_isr_irq+0x7c>
     d4c:	e353004e 	cmp	r3, #78	; 0x4e
     d50:	0a000031 	beq	e1c <__cs3_isr_irq+0x104>
     d54:	e353004e 	cmp	r3, #78	; 0x4e
     d58:	ca000006 	bgt	d78 <__cs3_isr_irq+0x60>
     d5c:	e3530048 	cmp	r3, #72	; 0x48
     d60:	0a000029 	beq	e0c <__cs3_isr_irq+0xf4>
     d64:	e3530049 	cmp	r3, #73	; 0x49
     d68:	0a000029 	beq	e14 <__cs3_isr_irq+0xfc>
     d6c:	e353001d 	cmp	r3, #29
     d70:	0a000019 	beq	ddc <__cs3_isr_irq+0xc4>
     d74:	ea000036 	b	e54 <__cs3_isr_irq+0x13c>
     d78:	e3530050 	cmp	r3, #80	; 0x50
     d7c:	0a00002a 	beq	e2c <__cs3_isr_irq+0x114>
     d80:	e3530050 	cmp	r3, #80	; 0x50
     d84:	ba000026 	blt	e24 <__cs3_isr_irq+0x10c>
     d88:	e3530051 	cmp	r3, #81	; 0x51
     d8c:	0a000028 	beq	e34 <__cs3_isr_irq+0x11c>
     d90:	ea00002f 	b	e54 <__cs3_isr_irq+0x13c>
     d94:	e35300c7 	cmp	r3, #199	; 0xc7
     d98:	0a000013 	beq	dec <__cs3_isr_irq+0xd4>
     d9c:	e35300c7 	cmp	r3, #199	; 0xc7
     da0:	ca000006 	bgt	dc0 <__cs3_isr_irq+0xa8>
     da4:	e3530059 	cmp	r3, #89	; 0x59
     da8:	0a000027 	beq	e4c <__cs3_isr_irq+0x134>
     dac:	e35300c5 	cmp	r3, #197	; 0xc5
     db0:	0a00000b 	beq	de4 <__cs3_isr_irq+0xcc>
     db4:	e3530054 	cmp	r3, #84	; 0x54
     db8:	0a000021 	beq	e44 <__cs3_isr_irq+0x12c>
     dbc:	ea000024 	b	e54 <__cs3_isr_irq+0x13c>
     dc0:	e35300c9 	cmp	r3, #201	; 0xc9
     dc4:	0a00000c 	beq	dfc <__cs3_isr_irq+0xe4>
     dc8:	e35300c9 	cmp	r3, #201	; 0xc9
     dcc:	ba000008 	blt	df4 <__cs3_isr_irq+0xdc>
     dd0:	e35300ca 	cmp	r3, #202	; 0xca
     dd4:	0a00000a 	beq	e04 <__cs3_isr_irq+0xec>
     dd8:	ea00001d 	b	e54 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     ddc:	ebfffefe 	bl	9dc <A9_PRIV_TIM_ISR>
     de0:	ea00001c 	b	e58 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     de4:	ebfffefd 	bl	9e0 <HPS_GPIO1_ISR>
     de8:	ea00001a 	b	e58 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     dec:	ebfffefc 	bl	9e4 <HPS_TIM0_ISR>
     df0:	ea000018 	b	e58 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     df4:	ebffff02 	bl	a04 <HPS_TIM1_ISR>
     df8:	ea000016 	b	e58 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     dfc:	ebffff01 	bl	a08 <HPS_TIM2_ISR>
     e00:	ea000014 	b	e58 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     e04:	ebffff00 	bl	a0c <HPS_TIM3_ISR>
     e08:	ea000012 	b	e58 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     e0c:	ebfffeff 	bl	a10 <FPGA_INTERVAL_TIM_ISR>
     e10:	ea000010 	b	e58 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     e14:	ebfffefe 	bl	a14 <FPGA_PB_KEYS_ISR>
     e18:	ea00000e 	b	e58 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     e1c:	ebffff05 	bl	a38 <FPGA_Audio_ISR>
     e20:	ea00000c 	b	e58 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     e24:	ebffff04 	bl	a3c <FPGA_PS2_ISR>
     e28:	ea00000a 	b	e58 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     e2c:	ebffff03 	bl	a40 <FPGA_JTAG_ISR>
     e30:	ea000008 	b	e58 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     e34:	ebffff02 	bl	a44 <FPGA_IrDA_ISR>
     e38:	ea000006 	b	e58 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     e3c:	ebffff01 	bl	a48 <FPGA_JP1_ISR>
     e40:	ea000004 	b	e58 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     e44:	ebffff00 	bl	a4c <FPGA_JP2_ISR>
     e48:	ea000002 	b	e58 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     e4c:	ebfffeff 	bl	a50 <FPGA_PS2_DUAL_ISR>
     e50:	ea000000 	b	e58 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     e54:	eafffffe 	b	e54 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     e58:	e30c3110 	movw	r3, #49424	; 0xc110
     e5c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e60:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     e64:	e5832000 	str	r2, [r3]
}
     e68:	e24bd018 	sub	sp, r11, #24
     e6c:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000e70 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     e70:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e74:	e28db000 	add	r11, sp, #0
	while(1);
     e78:	eafffffe 	b	e78 <__cs3_reset+0x8>

00000e7c <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     e7c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e80:	e28db000 	add	r11, sp, #0
	while(1);
     e84:	eafffffe 	b	e84 <__cs3_isr_undef+0x8>

00000e88 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     e88:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e8c:	e28db000 	add	r11, sp, #0
	while(1);
     e90:	eafffffe 	b	e90 <__cs3_isr_swi+0x8>

00000e94 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     e94:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     e98:	e28db000 	add	r11, sp, #0
	while(1);
     e9c:	eafffffe 	b	e9c <__cs3_isr_pabort+0x8>

00000ea0 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     ea0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ea4:	e28db000 	add	r11, sp, #0
	while(1);
     ea8:	eafffffe 	b	ea8 <__cs3_isr_dabort+0x8>

00000eac <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     eac:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     eb0:	e28db000 	add	r11, sp, #0
	while(1);
     eb4:	eafffffe 	b	eb4 <__cs3_isr_fiq+0x8>

00000eb8 <fix_bug>:
}

void fix_bug() {
     eb8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ebc:	e28db000 	add	r11, sp, #0
     ec0:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     ec4:	e30d3198 	movw	r3, #53656	; 0xd198
     ec8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ecc:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     ed0:	e51b3008 	ldr	r3, [r11, #-8]
     ed4:	e3a02703 	mov	r2, #786432	; 0xc0000
     ed8:	e5832000 	str	r2, [r3]
}
     edc:	e28bd000 	add	sp, r11, #0
     ee0:	e8bd0800 	ldmfd	sp!, {r11}
     ee4:	e12fff1e 	bx	lr

00000ee8 <int_setup>:

void int_setup(int len, int* IDs) {
     ee8:	e92d4800 	push	{r11, lr}
     eec:	e28db004 	add	r11, sp, #4
     ef0:	e24dd008 	sub	sp, sp, #8
     ef4:	e50b0008 	str	r0, [r11, #-8]
     ef8:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     efc:	ebffff0e 	bl	b3c <disable_A9_interrupts>
	set_A9_IRQ_stack();
     f00:	ebffff21 	bl	b8c <set_A9_IRQ_stack>
	fix_bug();
     f04:	ebffffeb 	bl	eb8 <fix_bug>
	config_GIC(len, IDs);
     f08:	e51b0008 	ldr	r0, [r11, #-8]
     f0c:	e51b100c 	ldr	r1, [r11, #-12]
     f10:	ebffff5b 	bl	c84 <config_GIC>
	enable_A9_interrupts();
     f14:	ebffff12 	bl	b64 <enable_A9_interrupts>
}
     f18:	e24bd004 	sub	sp, r11, #4
     f1c:	e8bd8800 	pop	{r11, pc}

00000f20 <atexit>:
     f20:	e1a01000 	mov	r1, r0
     f24:	e3a00000 	mov	r0, #0
     f28:	e92d4008 	push	{r3, lr}
     f2c:	e1a02000 	mov	r2, r0
     f30:	e1a03000 	mov	r3, r0
     f34:	eb00000e 	bl	f74 <__register_exitproc>
     f38:	e8bd4008 	pop	{r3, lr}
     f3c:	e12fff1e 	bx	lr

00000f40 <exit>:
     f40:	e92d4008 	push	{r3, lr}
     f44:	e3a01000 	mov	r1, #0
     f48:	e1a04000 	mov	r4, r0
     f4c:	eb000045 	bl	1068 <__call_exitprocs>
     f50:	e59f3018 	ldr	r3, [pc, #24]	; f70 <exit+0x30>
     f54:	e5930000 	ldr	r0, [r3]
     f58:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     f5c:	e3530000 	cmp	r3, #0
     f60:	11a0e00f 	movne	lr, pc
     f64:	112fff13 	bxne	r3
     f68:	e1a00004 	mov	r0, r4
     f6c:	eb0000c9 	bl	1298 <_exit>
     f70:	00001348 	.word	0x00001348

00000f74 <__register_exitproc>:
     f74:	e59fc0e4 	ldr	r12, [pc, #228]	; 1060 <__register_exitproc+0xec>
     f78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     f7c:	e59c4000 	ldr	r4, [r12]
     f80:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     f84:	e35c0000 	cmp	r12, #0
     f88:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     f8c:	e59c5004 	ldr	r5, [r12, #4]
     f90:	0584c148 	streq	r12, [r4, #328]	; 0x148
     f94:	e355001f 	cmp	r5, #31
     f98:	e24dd010 	sub	sp, sp, #16
     f9c:	e1a06000 	mov	r6, r0
     fa0:	da000015 	ble	ffc <__register_exitproc+0x88>
     fa4:	e59f00b8 	ldr	r0, [pc, #184]	; 1064 <__register_exitproc+0xf0>
     fa8:	e3500000 	cmp	r0, #0
     fac:	1a000001 	bne	fb8 <__register_exitproc+0x44>
     fb0:	e3e00000 	mvn	r0, #0
     fb4:	ea000018 	b	101c <__register_exitproc+0xa8>
     fb8:	e3a00e19 	mov	r0, #400	; 0x190
     fbc:	e58d100c 	str	r1, [sp, #12]
     fc0:	e58d2008 	str	r2, [sp, #8]
     fc4:	e58d3004 	str	r3, [sp, #4]
     fc8:	e320f000 	nop	{0}
     fcc:	e250c000 	subs	r12, r0, #0
     fd0:	e59d100c 	ldr	r1, [sp, #12]
     fd4:	e59d2008 	ldr	r2, [sp, #8]
     fd8:	e59d3004 	ldr	r3, [sp, #4]
     fdc:	0afffff3 	beq	fb0 <__register_exitproc+0x3c>
     fe0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     fe4:	e3a00000 	mov	r0, #0
     fe8:	e58c0004 	str	r0, [r12, #4]
     fec:	e58c5000 	str	r5, [r12]
     ff0:	e584c148 	str	r12, [r4, #328]	; 0x148
     ff4:	e58c0188 	str	r0, [r12, #392]	; 0x188
     ff8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     ffc:	e3560000 	cmp	r6, #0
    1000:	e59c4004 	ldr	r4, [r12, #4]
    1004:	1a000007 	bne	1028 <__register_exitproc+0xb4>
    1008:	e2843002 	add	r3, r4, #2
    100c:	e2844001 	add	r4, r4, #1
    1010:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1014:	e58c4004 	str	r4, [r12, #4]
    1018:	e3a00000 	mov	r0, #0
    101c:	e28dd010 	add	sp, sp, #16
    1020:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1024:	e12fff1e 	bx	lr
    1028:	e3a00001 	mov	r0, #1
    102c:	e1a00410 	lsl	r0, r0, r4
    1030:	e08c8104 	add	r8, r12, r4, lsl #2
    1034:	e3560002 	cmp	r6, #2
    1038:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    103c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1040:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1044:	e1877000 	orr	r7, r7, r0
    1048:	01830000 	orreq	r0, r3, r0
    104c:	e1a05008 	mov	r5, r8
    1050:	e5882088 	str	r2, [r8, #136]	; 0x88
    1054:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1058:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    105c:	eaffffe9 	b	1008 <__register_exitproc+0x94>
    1060:	00001348 	.word	0x00001348
    1064:	00000000 	.word	0x00000000

00001068 <__call_exitprocs>:
    1068:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    106c:	e59f3168 	ldr	r3, [pc, #360]	; 11dc <__call_exitprocs+0x174>
    1070:	e5933000 	ldr	r3, [r3]
    1074:	e24dd014 	sub	sp, sp, #20
    1078:	e58d3004 	str	r3, [sp, #4]
    107c:	e2833f52 	add	r3, r3, #328	; 0x148
    1080:	e58d0008 	str	r0, [sp, #8]
    1084:	e58d300c 	str	r3, [sp, #12]
    1088:	e1a07001 	mov	r7, r1
    108c:	e3a08001 	mov	r8, #1
    1090:	e59d3004 	ldr	r3, [sp, #4]
    1094:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1098:	e3560000 	cmp	r6, #0
    109c:	e59db00c 	ldr	r11, [sp, #12]
    10a0:	0a000033 	beq	1174 <__call_exitprocs+0x10c>
    10a4:	e5965004 	ldr	r5, [r6, #4]
    10a8:	e2554001 	subs	r4, r5, #1
    10ac:	5286a088 	addpl	r10, r6, #136	; 0x88
    10b0:	5285501f 	addpl	r5, r5, #31
    10b4:	508a5105 	addpl	r5, r10, r5, lsl #2
    10b8:	5a000007 	bpl	10dc <__call_exitprocs+0x74>
    10bc:	ea000029 	b	1168 <__call_exitprocs+0x100>
    10c0:	e5953000 	ldr	r3, [r5]
    10c4:	e1530007 	cmp	r3, r7
    10c8:	0a000005 	beq	10e4 <__call_exitprocs+0x7c>
    10cc:	e2444001 	sub	r4, r4, #1
    10d0:	e3740001 	cmn	r4, #1
    10d4:	e2455004 	sub	r5, r5, #4
    10d8:	0a000022 	beq	1168 <__call_exitprocs+0x100>
    10dc:	e3570000 	cmp	r7, #0
    10e0:	1afffff6 	bne	10c0 <__call_exitprocs+0x58>
    10e4:	e5963004 	ldr	r3, [r6, #4]
    10e8:	e06a2005 	rsb	r2, r10, r5
    10ec:	e2433001 	sub	r3, r3, #1
    10f0:	e0862002 	add	r2, r6, r2
    10f4:	e1530004 	cmp	r3, r4
    10f8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    10fc:	13a01000 	movne	r1, #0
    1100:	05864004 	streq	r4, [r6, #4]
    1104:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1108:	e3530000 	cmp	r3, #0
    110c:	0affffee 	beq	10cc <__call_exitprocs+0x64>
    1110:	e1a02418 	lsl	r2, r8, r4
    1114:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1118:	e1120001 	tst	r2, r1
    111c:	e5969004 	ldr	r9, [r6, #4]
    1120:	0a000016 	beq	1180 <__call_exitprocs+0x118>
    1124:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1128:	e1120001 	tst	r2, r1
    112c:	1a000016 	bne	118c <__call_exitprocs+0x124>
    1130:	e59d0008 	ldr	r0, [sp, #8]
    1134:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1138:	e1a0e00f 	mov	lr, pc
    113c:	e12fff13 	bx	r3
    1140:	e5963004 	ldr	r3, [r6, #4]
    1144:	e1530009 	cmp	r3, r9
    1148:	1affffd0 	bne	1090 <__call_exitprocs+0x28>
    114c:	e59b3000 	ldr	r3, [r11]
    1150:	e1530006 	cmp	r3, r6
    1154:	1affffcd 	bne	1090 <__call_exitprocs+0x28>
    1158:	e2444001 	sub	r4, r4, #1
    115c:	e3740001 	cmn	r4, #1
    1160:	e2455004 	sub	r5, r5, #4
    1164:	1affffdc 	bne	10dc <__call_exitprocs+0x74>
    1168:	e59f1070 	ldr	r1, [pc, #112]	; 11e0 <__call_exitprocs+0x178>
    116c:	e3510000 	cmp	r1, #0
    1170:	1a000009 	bne	119c <__call_exitprocs+0x134>
    1174:	e28dd014 	add	sp, sp, #20
    1178:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    117c:	e12fff1e 	bx	lr
    1180:	e1a0e00f 	mov	lr, pc
    1184:	e12fff13 	bx	r3
    1188:	eaffffec 	b	1140 <__call_exitprocs+0xd8>
    118c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1190:	e1a0e00f 	mov	lr, pc
    1194:	e12fff13 	bx	r3
    1198:	eaffffe8 	b	1140 <__call_exitprocs+0xd8>
    119c:	e5963004 	ldr	r3, [r6, #4]
    11a0:	e3530000 	cmp	r3, #0
    11a4:	e5963000 	ldr	r3, [r6]
    11a8:	1a000008 	bne	11d0 <__call_exitprocs+0x168>
    11ac:	e3530000 	cmp	r3, #0
    11b0:	0a000006 	beq	11d0 <__call_exitprocs+0x168>
    11b4:	e1a00006 	mov	r0, r6
    11b8:	e58b3000 	str	r3, [r11]
    11bc:	e320f000 	nop	{0}
    11c0:	e59b6000 	ldr	r6, [r11]
    11c4:	e3560000 	cmp	r6, #0
    11c8:	1affffb5 	bne	10a4 <__call_exitprocs+0x3c>
    11cc:	eaffffe8 	b	1174 <__call_exitprocs+0x10c>
    11d0:	e1a0b006 	mov	r11, r6
    11d4:	e1a06003 	mov	r6, r3
    11d8:	eafffff9 	b	11c4 <__call_exitprocs+0x15c>
    11dc:	00001348 	.word	0x00001348
    11e0:	00000000 	.word	0x00000000

000011e4 <register_fini>:
    11e4:	e92d4008 	push	{r3, lr}
    11e8:	e59f3010 	ldr	r3, [pc, #16]	; 1200 <register_fini+0x1c>
    11ec:	e3530000 	cmp	r3, #0
    11f0:	159f000c 	ldrne	r0, [pc, #12]	; 1204 <register_fini+0x20>
    11f4:	1bffff49 	blne	f20 <atexit>
    11f8:	e8bd4008 	pop	{r3, lr}
    11fc:	e12fff1e 	bx	lr
    1200:	00001370 	.word	0x00001370
    1204:	00001208 	.word	0x00001208

00001208 <__libc_fini_array>:
    1208:	e92d4038 	push	{r3, r4, r5, lr}
    120c:	e59f5030 	ldr	r5, [pc, #48]	; 1244 <__libc_fini_array+0x3c>
    1210:	e59f4030 	ldr	r4, [pc, #48]	; 1248 <__libc_fini_array+0x40>
    1214:	e0654004 	rsb	r4, r5, r4
    1218:	e1b04144 	asrs	r4, r4, #2
    121c:	10855104 	addne	r5, r5, r4, lsl #2
    1220:	0a000004 	beq	1238 <__libc_fini_array+0x30>
    1224:	e5353004 	ldr	r3, [r5, #-4]!
    1228:	e1a0e00f 	mov	lr, pc
    122c:	e12fff13 	bx	r3
    1230:	e2544001 	subs	r4, r4, #1
    1234:	1afffffa 	bne	1224 <__libc_fini_array+0x1c>
    1238:	eb00004c 	bl	1370 <__libc_fini>
    123c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1240:	e12fff1e 	bx	lr
    1244:	00001388 	.word	0x00001388
    1248:	0000138c 	.word	0x0000138c

0000124c <__cs3_premain>:
    124c:	e92d4008 	push	{r3, lr}
    1250:	eb000017 	bl	12b4 <__libc_init_array>
    1254:	e59f3030 	ldr	r3, [pc, #48]	; 128c <__cs3_premain+0x40>
    1258:	e3530000 	cmp	r3, #0
    125c:	15930000 	ldrne	r0, [r3]
    1260:	01a00003 	moveq	r0, r3
    1264:	e59f3024 	ldr	r3, [pc, #36]	; 1290 <__cs3_premain+0x44>
    1268:	e3530000 	cmp	r3, #0
    126c:	15931000 	ldrne	r1, [r3]
    1270:	01a01003 	moveq	r1, r3
    1274:	e3a02000 	mov	r2, #0
    1278:	ebfffbf7 	bl	25c <main>
    127c:	e59f3010 	ldr	r3, [pc, #16]	; 1294 <__cs3_premain+0x48>
    1280:	e3530000 	cmp	r3, #0
    1284:	1bffff2d 	blne	f40 <exit>
    1288:	eafffffe 	b	1288 <__cs3_premain+0x3c>
	...
    1294:	00000f40 	.word	0x00000f40

00001298 <_exit>:
    1298:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    129c:	e3a00018 	mov	r0, #24
    12a0:	e59f1004 	ldr	r1, [pc, #4]	; 12ac <_exit+0x14>
    12a4:	ef123456 	svc	0x00123456
    12a8:	eafffffe 	b	12a8 <_exit+0x10>
    12ac:	00020026 	.word	0x00020026

000012b0 <__cs3_isr_interrupt>:
    12b0:	eafffffe 	b	12b0 <__cs3_isr_interrupt>

000012b4 <__libc_init_array>:
    12b4:	e92d4070 	push	{r4, r5, r6, lr}
    12b8:	e59f506c 	ldr	r5, [pc, #108]	; 132c <__libc_init_array+0x78>
    12bc:	e59f606c 	ldr	r6, [pc, #108]	; 1330 <__libc_init_array+0x7c>
    12c0:	e0656006 	rsb	r6, r5, r6
    12c4:	e1b06146 	asrs	r6, r6, #2
    12c8:	12455004 	subne	r5, r5, #4
    12cc:	13a04000 	movne	r4, #0
    12d0:	0a000005 	beq	12ec <__libc_init_array+0x38>
    12d4:	e5b53004 	ldr	r3, [r5, #4]!
    12d8:	e2844001 	add	r4, r4, #1
    12dc:	e1a0e00f 	mov	lr, pc
    12e0:	e12fff13 	bx	r3
    12e4:	e1560004 	cmp	r6, r4
    12e8:	1afffff9 	bne	12d4 <__libc_init_array+0x20>
    12ec:	e59f5040 	ldr	r5, [pc, #64]	; 1334 <__libc_init_array+0x80>
    12f0:	e59f6040 	ldr	r6, [pc, #64]	; 1338 <__libc_init_array+0x84>
    12f4:	e0656006 	rsb	r6, r5, r6
    12f8:	eb000014 	bl	1350 <_init>
    12fc:	e1b06146 	asrs	r6, r6, #2
    1300:	12455004 	subne	r5, r5, #4
    1304:	13a04000 	movne	r4, #0
    1308:	0a000005 	beq	1324 <__libc_init_array+0x70>
    130c:	e5b53004 	ldr	r3, [r5, #4]!
    1310:	e2844001 	add	r4, r4, #1
    1314:	e1a0e00f 	mov	lr, pc
    1318:	e12fff13 	bx	r3
    131c:	e1560004 	cmp	r6, r4
    1320:	1afffff9 	bne	130c <__libc_init_array+0x58>
    1324:	e8bd4070 	pop	{r4, r5, r6, lr}
    1328:	e12fff1e 	bx	lr
    132c:	00001368 	.word	0x00001368
    1330:	00001368 	.word	0x00001368
    1334:	00001368 	.word	0x00001368
    1338:	00001370 	.word	0x00001370

Disassembly of section .rodata:

00001340 <_global_impure_ptr-0x8>:
    1340:	00000049 	.word	0x00000049
    1344:	000000c7 	.word	0x000000c7

00001348 <_global_impure_ptr>:
    1348:	000013b0 00000043                       ....C...

00001350 <_init>:
    1350:	e1a0c00d 	mov	r12, sp
    1354:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1358:	e24cb004 	sub	r11, r12, #4
    135c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1360:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1364:	e12fff1e 	bx	lr

00001368 <__init_array_start>:
    1368:	000011e4 	.word	0x000011e4

0000136c <__frame_dummy_init_array_entry>:
    136c:	00000208                                ....

00001370 <__libc_fini>:
    1370:	e1a0c00d 	mov	r12, sp
    1374:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1378:	e24cb004 	sub	r11, r12, #4
    137c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1380:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1384:	e12fff1e 	bx	lr

00001388 <__fini_array_start>:
    1388:	000001c4 	.word	0x000001c4

0000138c <__cs3_regions>:
	...
    1398:	000017e0 	.word	0x000017e0
    139c:	00000020 	.word	0x00000020
